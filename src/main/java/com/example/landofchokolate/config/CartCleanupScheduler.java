//package com.example.landofchokolate.config;
//
//import com.example.landofchokolate.enums.CartStatus;
//import com.example.landofchokolate.model.Cart;
//import com.example.landofchokolate.repository.CartRepository;
//import lombok.RequiredArgsConstructor;
//import lombok.extern.slf4j.Slf4j;
//import org.springframework.beans.factory.annotation.Value;
//import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
//import org.springframework.scheduling.annotation.Scheduled;
//import org.springframework.stereotype.Component;
//import org.springframework.transaction.annotation.Transactional;
//
//import java.time.LocalDateTime;
//import java.util.List;
//
///**
// * –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω
// *
// * –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ application.properties:
// * # ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω =====
// * # –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –∫–æ—Ä–∑–∏–Ω
// * app.cart.cleanup.enabled=true
// * # –ü–æ—Ä–æ–≥ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —á–∞—Å–∞—Ö (–∫–æ—Ä–∑–∏–Ω—ã —Å—Ç–∞—Ä—à–µ —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è)
// * app.cart.cleanup.inactive-threshold-hours=24
// * # –ü–æ—Ä–æ–≥ —É–¥–∞–ª–µ–Ω–∏—è –≤ –¥–Ω—è—Ö (–∫–æ—Ä–∑–∏–Ω—ã —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏ —Å—Ç–∞—Ä—à–µ —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —É–¥–∞–ª—è—é—Ç—Å—è)
// * app.cart.cleanup.delete-threshold-days=7
// * # –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑
// * app.cart.cleanup.batch-size=100
// * # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö –∏ –æ—á–µ–Ω—å —Å—Ç–∞—Ä—ã—Ö –∫–æ—Ä–∑–∏–Ω
// * app.cart.cleanup.immediate-delete=true
// *
// * # ===== –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ =====
// * # –ö–∞–∂–¥—ã–π —á–∞—Å - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω
// * # –ö–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤ - —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–º–µ—á–µ–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω
// * # –ö–∞–∂–¥—ã–µ 24 —á–∞—Å–∞ - —ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ—Ä–∑–∏–Ω (30+ –¥–Ω–µ–π)
// * # –ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç - –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
// *
// * # ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä–∑–∏–Ω =====
// * # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ cookie –∫–æ—Ä–∑–∏–Ω—ã (30 –¥–Ω–µ–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
// * app.cart.cookie.max-age=2592000
// * # –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã –≤ –¥–Ω—è—Ö
// * app.cart.expiration.days=30
// */
//@Component
//@RequiredArgsConstructor
//@Slf4j
//@ConditionalOnProperty(value = "app.cart.cleanup.enabled", havingValue = "true", matchIfMissing = true)
//public class CartCleanupScheduler {
//
//    private final CartRepository cartRepository;
//    private final CartMemoryMonitor cartMemoryMonitor;
//
//    @Value("${app.cart.cleanup.inactive-threshold-hours:24}")
//    private int inactiveThresholdHours;
//
//    @Value("${app.cart.cleanup.delete-threshold-days:7}")
//    private int deleteThresholdDays;
//
//    @Value("${app.cart.cleanup.batch-size:100}")
//    private int batchSize;
//
//    @Value("${app.cart.cleanup.immediate-delete:true}")
//    private boolean immediateDelete;
//
//    /**
//     * üïê 1. –ö–ê–ñ–î–´–ô –ß–ê–° - –û—Å–Ω–æ–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω
//     *
//     * –í—ã–ø–æ–ª–Ω—è–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
//     * ‚Ä¢ –ü—É—Å—Ç—ã–µ –∫–æ—Ä–∑–∏–Ω—ã ‚Üí –£–î–ê–õ–Ø–Æ–¢–°–Ø –ù–ï–ú–ï–î–õ–ï–ù–ù–û
//     * ‚Ä¢ –ö–æ—Ä–∑–∏–Ω—ã —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π ‚Üí –£–î–ê–õ–Ø–Æ–¢–°–Ø –ù–ï–ú–ï–î–õ–ï–ù–ù–û
//     * ‚Ä¢ –û—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ ‚Üí –ø–æ–º–µ—á–∞—é—Ç—Å—è –∫–∞–∫ ABANDONED
//     */
//    @Scheduled(fixedRate = 3600000) // –∫–∞–∂–¥—ã–π —á–∞—Å
//    @Transactional
//    public void cleanupInactiveCarts() {
//        try {
//            LocalDateTime inactiveThreshold = LocalDateTime.now().minusHours(inactiveThresholdHours);
//            List<Cart> inactiveCarts = cartRepository.findCartsForCleanup(inactiveThreshold);
//
//            if (!inactiveCarts.isEmpty()) {
//                log.info("Found {} inactive carts to process", inactiveCarts.size());
//
//                int processedCount = 0;
//                int deletedCount = 0;
//
//                for (Cart cart : inactiveCarts) {
//                    if (processedCount >= batchSize) {
//                        break;
//                    }
//
//                    if (immediateDelete && shouldDeleteImmediately(cart)) {
//                        // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —É–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∫–æ—Ä–∑–∏–Ω—ã –∏–ª–∏ –æ—á–µ–Ω—å —Å—Ç–∞—Ä—ã–µ
//                        cartRepository.delete(cart);
//                        deletedCount++;
//                        log.debug("Deleted cart {} immediately", cart.getCartUuid());
//                    } else {
//                        // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–±—Ä–æ—à–µ–Ω–Ω—É—é –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
//                        cart.setStatus(CartStatus.ABANDONED);
//                        cartRepository.save(cart);
//                        log.debug("Marked cart {} as abandoned", cart.getCartUuid());
//                    }
//
//                    processedCount++;
//                }
//
//                log.info("Processed {} carts: {} deleted immediately, {} marked as abandoned",
//                        processedCount, deletedCount, processedCount - deletedCount);
//            }
//
//        } catch (Exception e) {
//            log.error("Error during inactive cart cleanup", e);
//        }
//    }
//
//    /**
//     * üïï 2. –ö–ê–ñ–î–´–ï 6 –ß–ê–°–û–í - –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–º–µ—á–µ–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω
//     *
//     * –í—ã–ø–æ–ª–Ω—è–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
//     * ‚Ä¢ ABANDONED –∫–æ—Ä–∑–∏–Ω—ã —Å—Ç–∞—Ä—à–µ 1 –¥–Ω—è ‚Üí –£–î–ê–õ–Ø–Æ–¢–°–Ø
//     * ‚Ä¢ –ö–æ—Ä–∑–∏–Ω—ã —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ EXPIRED, CONVERTED, ABANDONED —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π ‚Üí –£–î–ê–õ–Ø–Æ–¢–°–Ø
//     */
//    @Scheduled(fixedRate = 21600000) // –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
//    @Transactional
//    public void deleteAbandonedCarts() {
//        try {
//            LocalDateTime deleteThreshold = LocalDateTime.now().minusDays(deleteThresholdDays);
//
//            // –£–¥–∞–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—ã —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ EXPIRED, CONVERTED, ABANDONED —Å—Ç–∞—Ä—à–µ –ø–æ—Ä–æ–≥–∞
//            int deletedCount = cartRepository.deleteOldCarts(deleteThreshold);
//
//            if (deletedCount > 0) {
//                log.info("Deleted {} old carts older than {} days", deletedCount, deleteThresholdDays);
//            }
//
//            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –≤—Å–µ ABANDONED –∫–æ—Ä–∑–∏–Ω—ã —Å—Ç–∞—Ä—à–µ 1 –¥–Ω—è
//            LocalDateTime abandonedThreshold = LocalDateTime.now().minusDays(1);
//            int abandonedDeleted = cartRepository.deleteAbandonedCarts(abandonedThreshold);
//
//            if (abandonedDeleted > 0) {
//                log.info("Deleted {} abandoned carts older than 1 day", abandonedDeleted);
//            }
//
//        } catch (Exception e) {
//            log.error("Error during old cart deletion", e);
//        }
//    }
//
//    /**
//     * üïò 3. –ö–ê–ñ–î–´–ï 24 –ß–ê–°–ê - –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å—Ç–∞—Ä—ã—Ö –∫–æ—Ä–∑–∏–Ω
//     *
//     * –í—ã–ø–æ–ª–Ω—è–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
//     * ‚Ä¢ –í–°–ï –∫–æ—Ä–∑–∏–Ω—ã —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π ‚Üí –£–î–ê–õ–Ø–Æ–¢–°–Ø –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û
//     */
//    @Scheduled(fixedRate = 86400000) // –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
//    @Transactional
//    public void emergencyCleanup() {
//        try {
//            // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–æ—Ä–∑–∏–Ω—ã —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
//            LocalDateTime emergencyThreshold = LocalDateTime.now().minusDays(30);
//            int deletedCount = cartRepository.deleteAllOldCarts(emergencyThreshold);
//
//            if (deletedCount > 0) {
//                log.info("Emergency cleanup: deleted {} carts older than 30 days", deletedCount);
//            }
//
//        } catch (Exception e) {
//            log.error("Error during emergency cleanup", e);
//        }
//    }
//
//    /**
//     * üìä –ö–ê–ñ–î–´–ï 30 –ú–ò–ù–£–¢ - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
//     */
//    @Scheduled(fixedRate = 1800000) // –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
//    public void logStatistics() {
//        try {
//            cartMemoryMonitor.logCartStatistics();
//            cartMemoryMonitor.checkMemoryUsage();
//
//        } catch (Exception e) {
//            log.error("Error during statistics logging", e);
//        }
//    }
//
//    /**
//     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ —É–¥–∞–ª–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
//     */
//    private boolean shouldDeleteImmediately(Cart cart) {
//        // –£–¥–∞–ª—è–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –µ—Å–ª–∏:
//        // 1. –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞—è (–Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤)
//        // 2. –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–µ–Ω—å —Å—Ç–∞—Ä–∞—è (>7 –¥–Ω–µ–π –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
//        // 3. –ö–æ—Ä–∑–∏–Ω–∞ —É–∂–µ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∏—Å—Ç–µ–∫—à–∞—è
//
//        boolean isEmpty = cart.getItems() == null || cart.getItems().isEmpty();
//        boolean isVeryOld = cart.getLastActivityAt() != null &&
//                cart.getLastActivityAt().isBefore(LocalDateTime.now().minusDays(7));
//        boolean isExpired = cart.getStatus() == CartStatus.EXPIRED;
//
//        return isEmpty || isVeryOld || isExpired;
//    }
//
//    /**
//     * üîß –†—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
//     */
//    public void manualCleanup(int daysThreshold) {
//        log.info("Starting manual cleanup for carts older than {} days", daysThreshold);
//
//        try {
//            LocalDateTime threshold = LocalDateTime.now().minusDays(daysThreshold);
//            int deletedCount = cartRepository.deleteAllOldCarts(threshold);
//            log.info("Manual cleanup completed: deleted {} carts", deletedCount);
//
//            // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
//            cartMemoryMonitor.logCartStatistics();
//
//        } catch (Exception e) {
//            log.error("Error during manual cleanup", e);
//        }
//    }
//}
//
package com.example.landofchokolate.config;

import com.example.landofchokolate.repository.CartRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;

/**
 * –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω
 *
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ application.properties:
 * # ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω =====
 * # –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –∫–æ—Ä–∑–∏–Ω
 * app.cart.cleanup.enabled=true
 * # –ü–æ—Ä–æ–≥ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω –≤ –¥–Ω—è—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 –¥–Ω–µ–π)
 * app.cart.cleanup.delete-threshold-days=30
 *
 * # ===== –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ =====
 * # –ö–∞–∂–¥—ã–µ 24 —á–∞—Å–∞ - —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∫–æ—Ä–∑–∏–Ω (30+ –¥–Ω–µ–π –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
 *
 * # ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä–∑–∏–Ω =====
 * # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ cookie –∫–æ—Ä–∑–∏–Ω—ã (30 –¥–Ω–µ–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
 * app.cart.cookie.max-age=2592000
 * # –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã –≤ –¥–Ω—è—Ö
 * app.cart.expiration.days=30
 */
@Component
@RequiredArgsConstructor
@Slf4j
@ConditionalOnProperty(value = "app.cart.cleanup.enabled", havingValue = "true", matchIfMissing = true)
public class CartCleanupScheduler {

    private final CartRepository cartRepository;

    @Value("${app.cart.cleanup.delete-threshold-days:30}")
    private int deleteThresholdDays;

    /**
     * üïò –ö–ê–ñ–î–´–ï 24 –ß–ê–°–ê - –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
     *
     * –í—ã–ø–æ–ª–Ω—è–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
     * ‚Ä¢ –í–°–ï –∫–æ—Ä–∑–∏–Ω—ã —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 –¥–Ω–µ–π) ‚Üí –£–î–ê–õ–Ø–Æ–¢–°–Ø
     */
    @Scheduled(fixedRate = 86400000) // –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞ (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
    @Transactional
    public void cleanupOldCarts() {
        try {
            log.info("Starting cart cleanup for carts older than {} days", deleteThresholdDays);

            // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–æ—Ä–∑–∏–Ω—ã —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞
            LocalDateTime deleteThreshold = LocalDateTime.now().minusDays(deleteThresholdDays);
            int deletedCount = cartRepository.deleteAllOldCarts(deleteThreshold);

            if (deletedCount > 0) {
                log.info("Cart cleanup completed: deleted {} carts older than {} days",
                        deletedCount, deleteThresholdDays);
            } else {
                log.debug("Cart cleanup completed: no old carts found for deletion");
            }

        } catch (Exception e) {
            log.error("Error during cart cleanup", e);
        }
    }

    /**
     * üîß –†—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
     *
     * @param daysThreshold –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø–æ—Ä–æ–≥–∞ —É–¥–∞–ª–µ–Ω–∏—è
     */
    public void manualCleanup(int daysThreshold) {
        log.info("Starting manual cart cleanup for carts older than {} days", daysThreshold);

        try {
            LocalDateTime threshold = LocalDateTime.now().minusDays(daysThreshold);
            int deletedCount = cartRepository.deleteAllOldCarts(threshold);

            log.info("Manual cart cleanup completed: deleted {} carts", deletedCount);

        } catch (Exception e) {
            log.error("Error during manual cart cleanup", e);
        }
    }

}