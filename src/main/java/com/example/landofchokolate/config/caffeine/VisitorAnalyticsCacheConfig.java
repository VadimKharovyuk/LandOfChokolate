package com.example.landofchokolate.config.caffeine;

import com.github.benmanes.caffeine.cache.Cache;
import com.github.benmanes.caffeine.cache.Caffeine;
import lombok.extern.slf4j.Slf4j;
import org.springframework.cache.CacheManager;
import org.springframework.cache.caffeine.CaffeineCacheManager;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.time.Duration;

@Configuration
@Slf4j
public class VisitorAnalyticsCacheConfig {

    @Bean("visitorAnalyticsCacheManager")
    public CacheManager visitorAnalyticsCacheManager() {
        CaffeineCacheManager cacheManager = new CaffeineCacheManager();

        // üìä –ö–µ—à –¥–ª—è –±–∞–∑–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–≥–ª–∞–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥)
        Cache<Object, Object> basicStatsCache = Caffeine.newBuilder()
                .maximumSize(10) // –ù–µ–±–æ–ª—å—à–æ–π –∫–µ—à, —Ç.–∫. –±–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–¥–Ω–∞
                .expireAfterWrite(Duration.ofMinutes(5)) // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                .expireAfterAccess(Duration.ofMinutes(3))
                .recordStats()
                .evictionListener((key, value, cause) ->
                        log.info("üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è –±–∞–∑–æ–≤–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑ –∫–µ—à—É: –∫–ª—é—á={}, –ø—Ä–∏—á–∏–Ω–∞={}", key, cause))
                .build();
        cacheManager.registerCustomCache("visitorBasicStats", basicStatsCache);

        // üåç –ö–µ—à –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
        Cache<Object, Object> countryStatsCache = Caffeine.newBuilder()
                .maximumSize(100) // –†–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã (1, 7, 30, 90 –¥–Ω–µ–π)
                .expireAfterWrite(Duration.ofMinutes(15)) // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
                .expireAfterAccess(Duration.ofMinutes(10))
                .recordStats()
                .evictionListener((key, value, cause) ->
                        log.info("üåç –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—Ä–∞—ó–Ω –∑ –∫–µ—à—É: –∫–ª—é—á={}, –ø—Ä–∏—á–∏–Ω–∞={}", key, cause))
                .build();
        cacheManager.registerCustomCache("visitorCountryStats", countryStatsCache);

        // üë• –ö–µ—à –¥–ª—è —Ç–æ–ø IP –∞–¥—Ä–µ—Å–æ–≤
        Cache<Object, Object> topIpsCache = Caffeine.newBuilder()
                .maximumSize(50) // –†–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
                .expireAfterWrite(Duration.ofMinutes(10)) // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
                .expireAfterAccess(Duration.ofMinutes(8))
                .recordStats()
                .evictionListener((key, value, cause) ->
                        log.info("üë• –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–ø IP –∑ –∫–µ—à—É: –∫–ª—é—á={}, –ø—Ä–∏—á–∏–Ω–∞={}", key, cause))
                .build();
        cacheManager.registerCustomCache("visitorTopIPs", topIpsCache);

        // üîç –ö–µ—à –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ IP (–¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
        Cache<Object, Object> ipStatsCache = Caffeine.newBuilder()
                .maximumSize(1000) // –ú–Ω–æ–≥–æ IP –∞–¥—Ä–µ—Å–æ–≤
                .expireAfterWrite(Duration.ofMinutes(30)) // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ IP –º–µ–Ω—è–µ—Ç—Å—è —Ä–µ–¥–∫–æ
                .expireAfterAccess(Duration.ofMinutes(20))
                .recordStats()
                .evictionListener((key, value, cause) ->
                        log.info("üîç –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ IP –∑ –∫–µ—à—É: –∫–ª—é—á={}, –ø—Ä–∏—á–∏–Ω–∞={}", key, cause))
                .build();
        cacheManager.registerCustomCache("visitorIpStats", ipStatsCache);

        // üìÑ –ö–µ—à –¥–ª—è –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π
        Cache<Object, Object> visitorsListCache = Caffeine.newBuilder()
                .maximumSize(200) // –†–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Ä–∞–∑–º–µ—Ä—ã
                .expireAfterWrite(Duration.ofMinutes(3)) // –ß–∞—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è
                .expireAfterAccess(Duration.ofMinutes(2))
                .recordStats()
                .evictionListener((key, value, cause) ->
                        log.info("üìÑ –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –≤—ñ–¥–≤—ñ–¥—É–≤–∞—á—ñ–≤ –∑ –∫–µ—à—É: –∫–ª—é—á={}, –ø—Ä–∏—á–∏–Ω–∞={}", key, cause))
                .build();
        cacheManager.registerCustomCache("visitorsList", visitorsListCache);

        // üïê –ö–µ—à –¥–ª—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ IP (timeline)
        Cache<Object, Object> ipTimelineCache = Caffeine.newBuilder()
                .maximumSize(500) // –ú–Ω–æ–≥–æ IP —Å —Ä–∞–∑–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏
                .expireAfterWrite(Duration.ofMinutes(20))
                .expireAfterAccess(Duration.ofMinutes(15))
                .recordStats()
                .evictionListener((key, value, cause) ->
                        log.info("üïê –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ö—Ä–æ–Ω–æ–ª–æ–≥—ñ—ó IP –∑ –∫–µ—à—É: –∫–ª—é—á={}, –ø—Ä–∏—á–∏–Ω–∞={}", key, cause))
                .build();
        cacheManager.registerCustomCache("visitorIpTimeline", ipTimelineCache);

        // üìà –ö–µ—à –¥–ª—è –ø–æ—á–∞—Å–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        Cache<Object, Object> hourlyStatsCache = Caffeine.newBuilder()
                .maximumSize(30) // –†–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã (1, 7, 30 –¥–Ω–µ–π)
                .expireAfterWrite(Duration.ofMinutes(60)) // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
                .expireAfterAccess(Duration.ofMinutes(30))
                .recordStats()
                .evictionListener((key, value, cause) ->
                        log.info("üìà –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≥–æ–¥–∏–Ω–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑ –∫–µ—à—É: –∫–ª—é—á={}, –ø—Ä–∏—á–∏–Ω–∞={}", key, cause))
                .build();
        cacheManager.registerCustomCache("visitorHourlyStats", hourlyStatsCache);

        log.info("‚úÖ –ö–µ—à –¥–ª—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ –≤—ñ–¥–≤—ñ–¥—É–≤–∞—á—ñ–≤ —Å–∫–æ–Ω—Ñ—ñ–≥—É—Ä–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ");
        return cacheManager;
    }
}