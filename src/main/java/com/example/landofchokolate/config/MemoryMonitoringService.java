package com.example.landofchokolate.service;

import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import javax.management.MBeanServer;
import javax.management.ObjectName;
import java.lang.management.ManagementFactory;
import java.lang.management.MemoryMXBean;
import java.lang.management.MemoryUsage;
import java.text.DecimalFormat;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞–º—è—Ç–∏ JVM –∏ —Å–µ—Å—Å–∏–π
 */
@Service
@Slf4j
public class MemoryMonitoringService {

    private final MemoryMXBean memoryBean;
    private final MBeanServer mBeanServer;
    private final DecimalFormat df = new DecimalFormat("#.##");

    public MemoryMonitoringService() {
        this.memoryBean = ManagementFactory.getMemoryMXBean();
        this.mBeanServer = ManagementFactory.getPlatformMBeanServer();
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞–º—è—Ç–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
     */
    @Scheduled(fixedRate = 300000) // 5 –º–∏–Ω—É—Ç = 300000 –º—Å
    public void logMemoryStatistics() {
        logJVMMemoryUsage();
        logSessionStatistics();
        logGarbageCollectionInfo();
    }

//    /**
//     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞–º—è—Ç–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É (–º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ)
//     */
//    @Scheduled(fixedRate = 60000) // 1 –º–∏–Ω—É—Ç–∞ = 60000 –º—Å
//    public void logMemoryStatisticsDetailed() {
//        MemoryInfo memoryInfo = getMemoryInfo();
//
//        log.info("üîç –ü–ê–ú–Ø–¢–¨ JVM: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {} MB, –°–≤–æ–±–æ–¥–Ω–æ: {} MB, –ú–∞–∫—Å: {} MB ({}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ)",
//                memoryInfo.getUsedMemoryMB(),
//                memoryInfo.getFreeMemoryMB(),
//                memoryInfo.getMaxMemoryMB(),
//                memoryInfo.getUsagePercentage());
//
//        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø–∞–º—è—Ç–∏
//        if (memoryInfo.getUsagePercentageValue() > 80) {
//            log.warn("‚ö†Ô∏è –í–´–°–û–ö–û–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –ü–ê–ú–Ø–¢–ò: {}% - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏",
//                    memoryInfo.getUsagePercentage());
//        }
//    }

    /**
     * –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ JVM
     */
    public void logJVMMemoryUsage() {
        MemoryUsage heapMemory = memoryBean.getHeapMemoryUsage();
        MemoryUsage nonHeapMemory = memoryBean.getNonHeapMemoryUsage();

        // Heap –ø–∞–º—è—Ç—å (–æ—Å–Ω–æ–≤–Ω–∞—è –ø–∞–º—è—Ç—å –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤)
        long heapUsed = heapMemory.getUsed() / (1024 * 1024);
        long heapMax = heapMemory.getMax() / (1024 * 1024);
        long heapFree = heapMax - heapUsed;
        double heapUsagePercent = ((double) heapUsed / heapMax) * 100;

        // Non-Heap –ø–∞–º—è—Ç—å (–º–µ—Ç–∞–∫–ª–∞—Å—Å—ã, –∫–æ–¥)
        long nonHeapUsed = nonHeapMemory.getUsed() / (1024 * 1024);
        long nonHeapMax = nonHeapMemory.getMax() / (1024 * 1024);

        log.info("üìä === JVM –ü–ê–ú–Ø–¢–¨ –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===");
        log.info("üî∑ HEAP –ü–ê–ú–Ø–¢–¨: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {} MB / {} MB ({}%), –°–≤–æ–±–æ–¥–Ω–æ: {} MB",
                heapUsed, heapMax, df.format(heapUsagePercent), heapFree);
        log.info("üî∂ NON-HEAP –ü–ê–ú–Ø–¢–¨: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {} MB / {} MB",
                nonHeapUsed, nonHeapMax > 0 ? nonHeapMax : "unlimited");

        // –°–∏—Å—Ç–µ–º–Ω–∞—è –ø–∞–º—è—Ç—å
        Runtime runtime = Runtime.getRuntime();
        long totalMemory = runtime.totalMemory() / (1024 * 1024);
        long freeMemory = runtime.freeMemory() / (1024 * 1024);
        long maxMemory = runtime.maxMemory() / (1024 * 1024);

        log.info("üíæ –°–ò–°–¢–ï–ú–ù–ê–Ø –ü–ê–ú–Ø–¢–¨: –û–±—â–∞—è: {} MB, –°–≤–æ–±–æ–¥–Ω–∞—è: {} MB, –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: {} MB",
                totalMemory, freeMemory, maxMemory);
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–π
     */
    public void logSessionStatistics() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–π —á–µ—Ä–µ–∑ JMX
            ObjectName sessionManager = new ObjectName("Catalina:type=Manager,host=localhost,context=/");

            if (mBeanServer.isRegistered(sessionManager)) {
                Integer activeSessions = (Integer) mBeanServer.getAttribute(sessionManager, "activeSessions");
                Integer maxActiveSessions = (Integer) mBeanServer.getAttribute(sessionManager, "maxActiveSessions");
                Long sessionCounter = (Long) mBeanServer.getAttribute(sessionManager, "sessionCounter");
                Integer maxInactiveInterval = (Integer) mBeanServer.getAttribute(sessionManager, "maxInactiveInterval");

                log.info("üîê === –°–ï–°–°–ò–ò –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===");
                log.info("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏: {} (–º–∞–∫—Å –∑–∞ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {})", activeSessions, maxActiveSessions);
                log.info("üìä –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ —Å–µ—Å—Å–∏–π: {}", sessionCounter);
                log.info("‚è∞ –¢–∞–π–º–∞—É—Ç —Å–µ—Å—Å–∏–∏: {} —Å–µ–∫—É–Ω–¥ ({} –º–∏–Ω—É—Ç)", maxInactiveInterval, maxInactiveInterval / 60);

                // –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø–∞–º—è—Ç–∏, –∑–∞–Ω–∏–º–∞–µ–º–æ–π —Å–µ—Å—Å–∏—è–º–∏
                estimateSessionMemoryUsage(activeSessions);
            } else {
                log.debug("üîç SessionManager MBean –Ω–µ –Ω–∞–π–¥–µ–Ω - –≤–æ–∑–º–æ–∂–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è embedded server");
                logAlternativeSessionInfo();
            }
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–π: {}", e.getMessage());
            logAlternativeSessionInfo();
        }
    }

    /**
     * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏—è—Ö
     */
    private void logAlternativeSessionInfo() {
        // –î–ª—è embedded —Å–µ—Ä–≤–µ—Ä–æ–≤ –º–æ–∂–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        log.info("üîê === –°–ï–°–°–ò–ò (–ë–ê–ó–û–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø) ===");
        log.info("üìã –°–µ—Ä–≤–µ—Ä: Embedded (—Ç–æ—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)");
        log.info("üí° –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–Ω–µ—à–Ω–∏–π Tomcat –∏–ª–∏ Actuator");
    }

    /**
     * –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø–∞–º—è—Ç–∏, –∑–∞–Ω–∏–º–∞–µ–º–æ–π —Å–µ—Å—Å–∏—è–º–∏
     */
    private void estimateSessionMemoryUsage(Integer activeSessions) {
        if (activeSessions == null || activeSessions == 0) {
            log.info("üíæ –ü–∞–º—è—Ç—å —Å–µ—Å—Å–∏–π: 0 MB (–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π)");
            return;
        }

        // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: –∫–∞–∂–¥–∞—è —Å–µ—Å—Å–∏—è —Å –∫–æ—Ä–∑–∏–Ω–æ–π ~ 1-5 KB
        // –ë–∞–∑–æ–≤–∞—è —Å–µ—Å—Å–∏—è: ~1KB
        // –ö–æ—Ä–∑–∏–Ω–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏: ~2-4KB –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
        int estimatedBytesPerSession = 3 * 1024; // 3KB –≤ —Å—Ä–µ–¥–Ω–µ–º
        long totalSessionMemory = (long) activeSessions * estimatedBytesPerSession;
        double sessionMemoryMB = totalSessionMemory / (1024.0 * 1024.0);

        log.info("üíæ –ü—Ä–∏–º–µ—Ä–Ω–∞—è –ø–∞–º—è—Ç—å —Å–µ—Å—Å–∏–π: {} MB (~{} KB –Ω–∞ —Å–µ—Å—Å–∏—é)",
                df.format(sessionMemoryMB), estimatedBytesPerSession / 1024);

        if (sessionMemoryMB > 10) {
            log.warn("‚ö†Ô∏è –°–µ—Å—Å–∏–∏ –∑–∞–Ω–∏–º–∞—é—Ç –º–Ω–æ–≥–æ –ø–∞–º—è—Ç–∏: {} MB", df.format(sessionMemoryMB));
        }
    }

    /**
     * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–±–æ—Ä—â–∏–∫–µ –º—É—Å–æ—Ä–∞
     */
    private void logGarbageCollectionInfo() {
        try {
            ManagementFactory.getGarbageCollectorMXBeans().forEach(gcBean -> {
                log.info("üóëÔ∏è GC {}: –ö–æ–ª–ª–µ–∫—Ü–∏–π: {}, –í—Ä–µ–º—è: {} –º—Å",
                        gcBean.getName(),
                        gcBean.getCollectionCount(),
                        gcBean.getCollectionTime());
            });
        } catch (Exception e) {
            log.debug("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ GC: {}", e.getMessage());
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏
     */
    public MemoryInfo getMemoryInfo() {
        MemoryUsage heapMemory = memoryBean.getHeapMemoryUsage();

        long usedMB = heapMemory.getUsed() / (1024 * 1024);
        long maxMB = heapMemory.getMax() / (1024 * 1024);
        long freeMB = maxMB - usedMB;
        double usagePercent = ((double) usedMB / maxMB) * 100;

        return new MemoryInfo(usedMB, freeMB, maxMB, usagePercent);
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ —Å–±–æ—Ä–∫–∏ –º—É—Å–æ—Ä–∞ (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!)
     */
    public void forceGarbageCollection() {
        log.info("üóëÔ∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ —Å–±–æ—Ä–∫–∏ –º—É—Å–æ—Ä–∞...");
        long beforeMemory = memoryBean.getHeapMemoryUsage().getUsed() / (1024 * 1024);

        System.gc();

        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è GC
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }

        long afterMemory = memoryBean.getHeapMemoryUsage().getUsed() / (1024 * 1024);
        long freed = beforeMemory - afterMemory;

        log.info("üóëÔ∏è –°–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ: {} MB", freed);
    }

    /**
     * –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–º—è—Ç–∏
     */
    @Getter
    public static class MemoryInfo {
        private final long usedMemoryMB;
        private final long freeMemoryMB;
        private final long maxMemoryMB;
        private final double usagePercentageValue;

        public MemoryInfo(long usedMemoryMB, long freeMemoryMB, long maxMemoryMB, double usagePercentageValue) {
            this.usedMemoryMB = usedMemoryMB;
            this.freeMemoryMB = freeMemoryMB;
            this.maxMemoryMB = maxMemoryMB;
            this.usagePercentageValue = usagePercentageValue;
        }

        public String getUsagePercentage() { return new DecimalFormat("#.##").format(usagePercentageValue); }
    }
}