package com.example.landofchokolate.config.system;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.lang.management.ManagementFactory;
import java.lang.management.MemoryMXBean;
import java.lang.management.MemoryUsage;
import java.text.DecimalFormat;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;

@RestController
@RequestMapping("/api/monitoring")
@RequiredArgsConstructor
@Slf4j
public class MemoryMonitoringController {

    private final MemoryMXBean memoryBean = ManagementFactory.getMemoryMXBean();
    private final DecimalFormat df = new DecimalFormat("#.##");


    /**
     * –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏ JVM
     * GET /api/monitoring/memory
     */
    @GetMapping("/memory")
    public ResponseEntity<Map<String, Object>> getMemoryInfo() {
        try {
            MemoryUsage heapMemory = memoryBean.getHeapMemoryUsage();
            MemoryUsage nonHeapMemory = memoryBean.getNonHeapMemoryUsage();
            Runtime runtime = Runtime.getRuntime();

            Map<String, Object> memoryInfo = new HashMap<>();

            // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            memoryInfo.put("timestamp", LocalDateTime.now());
            memoryInfo.put("status", "success");
            memoryInfo.put("icon", "üíæ");
            memoryInfo.put("title", "–ü–∞–º'—è—Ç—å JVM");
            memoryInfo.put("description", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞–º'—è—Ç—ñ –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–æ—ó –º–∞—à–∏–Ω–∏ Java");

            // Heap –ø–∞–º—è—Ç—å
            Map<String, Object> heapInfo = new HashMap<>();
            long heapUsedMB = heapMemory.getUsed() / (1024 * 1024);
            long heapMaxMB = heapMemory.getMax() / (1024 * 1024);
            long heapFreeMB = heapMaxMB - heapUsedMB;
            double heapUsagePercent = ((double) heapUsedMB / heapMaxMB) * 100;

            heapInfo.put("icon", "üî∑");
            heapInfo.put("name", "Heap –ø–∞–º'—è—Ç—å");
            heapInfo.put("description", "–û—Å–Ω–æ–≤–Ω–∞ –ø–∞–º'—è—Ç—å –¥–ª—è –æ–±'—î–∫—Ç—ñ–≤ –ø—Ä–æ–≥—Ä–∞–º–∏");
            heapInfo.put("used_mb", heapUsedMB);
            heapInfo.put("max_mb", heapMaxMB);
            heapInfo.put("free_mb", heapFreeMB);
            heapInfo.put("usage_percent", Math.round(heapUsagePercent * 100.0) / 100.0);
            heapInfo.put("usage_status", getUsageStatus(heapUsagePercent));
            heapInfo.put("status_icon", getUsageIcon(heapUsagePercent));
            heapInfo.put("status_text", getUsageTextUkrainian(heapUsagePercent));

            // Non-Heap –ø–∞–º—è—Ç—å
            Map<String, Object> nonHeapInfo = new HashMap<>();
            nonHeapInfo.put("icon", "üî∂");
            nonHeapInfo.put("name", "Non-Heap –ø–∞–º'—è—Ç—å");
            nonHeapInfo.put("description", "–ü–∞–º'—è—Ç—å –¥–ª—è –º–µ—Ç–∞–∫–ª–∞—Å—ñ–≤ —Ç–∞ –∫–æ–¥—É JVM");
            nonHeapInfo.put("used_mb", nonHeapMemory.getUsed() / (1024 * 1024));
            nonHeapInfo.put("max_mb", nonHeapMemory.getMax() > 0 ? nonHeapMemory.getMax() / (1024 * 1024) : -1);

            // –°–∏—Å—Ç–µ–º–Ω–∞—è –ø–∞–º—è—Ç—å
            Map<String, Object> systemInfo = new HashMap<>();
            systemInfo.put("icon", "üñ•Ô∏è");
            systemInfo.put("name", "–°–∏—Å—Ç–µ–º–Ω–∞ –ø–∞–º'—è—Ç—å");
            systemInfo.put("description", "–ó–∞–≥–∞–ª—å–Ω–∞ –ø–∞–º'—è—Ç—å –ø—Ä–æ—Ü–µ—Å—É JVM");
            systemInfo.put("total_mb", runtime.totalMemory() / (1024 * 1024));
            systemInfo.put("free_mb", runtime.freeMemory() / (1024 * 1024));
            systemInfo.put("max_mb", runtime.maxMemory() / (1024 * 1024));

            memoryInfo.put("heap", heapInfo);
            memoryInfo.put("non_heap", nonHeapInfo);
            memoryInfo.put("system", systemInfo);

            log.info("üîç API: –ó–∞–ø–∏—Ç–∞–Ω–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–∞–º'—è—Ç—å JVM");
            return ResponseEntity.ok(memoryInfo);

        } catch (Exception e) {
            log.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–∞–º'—è—Ç—å: {}", e.getMessage());
            return ResponseEntity.internalServerError()
                    .body(Map.of(
                            "status", "error",
                            "message", e.getMessage(),
                            "icon", "‚ùå",
                            "description", "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞–º'—è—Ç—ñ"
                    ));
        }
    }


    private String getUsageIcon(double usagePercent) {
        if (usagePercent > 90) return "üî¥";
        if (usagePercent > 80) return "üü°";
        if (usagePercent > 60) return "üü†";
        return "üü¢";
    }

    private String getUsageTextUkrainian(double usagePercent) {
        if (usagePercent > 90) return "–ö—Ä–∏—Ç–∏—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å";
        if (usagePercent > 80) return "–í–∏—Å–æ–∫–∏–π —Ä—ñ–≤–µ–Ω—å";
        if (usagePercent > 60) return "–ü–æ–º—ñ—Ä–Ω–∏–π —Ä—ñ–≤–µ–Ω—å";
        return "–ù–æ—Ä–º–∞–ª—å–Ω–∏–π —Ä—ñ–≤–µ–Ω—å";
    }



    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–±–æ—Ä—â–∏–∫–µ –º—É—Å–æ—Ä–∞
     * GET /api/monitoring/gc
     */
    @GetMapping("/gc")
    public ResponseEntity<Map<String, Object>> getGCInfo() {
        try {
            Map<String, Object> gcInfo = new HashMap<>();
            gcInfo.put("timestamp", LocalDateTime.now());
            gcInfo.put("status", "success");
            gcInfo.put("icon", "üóëÔ∏è");
            gcInfo.put("title", "–ó–±–∏—Ä–∞—á —Å–º—ñ—Ç—Ç—è");
            gcInfo.put("description", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ–±–æ—Ç–∏ Garbage Collector");

            Map<String, Map<String, Object>> collectors = new HashMap<>();

            ManagementFactory.getGarbageCollectorMXBeans().forEach(gcBean -> {
                Map<String, Object> collectorInfo = new HashMap<>();
                collectorInfo.put("collection_count", gcBean.getCollectionCount());
                collectorInfo.put("collection_time_ms", gcBean.getCollectionTime());
                collectorInfo.put("memory_pool_names", gcBean.getMemoryPoolNames());

                collectors.put(gcBean.getName(), collectorInfo);
            });

            gcInfo.put("garbage_collectors", collectors);

            log.info("üóëÔ∏è API: –ó–∞–ø–∏—Ç–∞–Ω–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–±–∏—Ä–∞—á —Å–º—ñ—Ç—Ç—è");
            return ResponseEntity.ok(gcInfo);

        } catch (Exception e) {
            log.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ GC: {}", e.getMessage());
            return ResponseEntity.internalServerError()
                    .body(Map.of(
                            "status", "error",
                            "message", e.getMessage(),
                            "icon", "‚ùå",
                            "description", "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–±–∏—Ä–∞—á–∞ —Å–º—ñ—Ç—Ç—è"
                    ));
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–≤—Å–µ –≤ –æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ)
     * GET /api/monitoring/full
     */
    @GetMapping("/full")
    public ResponseEntity<Map<String, Object>> getFullStatistics() {
        try {
            Map<String, Object> fullStats = new HashMap<>();
            fullStats.put("timestamp", LocalDateTime.now());
            fullStats.put("status", "success");
            fullStats.put("icon", "üìä");
            fullStats.put("title", "–ü–æ–≤–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º–∏");
            fullStats.put("description", "–ö–æ–º–ø–ª–µ–∫—Å–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º'—è—Ç—ñ, —Å–µ—Å—ñ–π —Ç–∞ –∑–±–∏—Ä–∞—á–∞ —Å–º—ñ—Ç—Ç—è");

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            ResponseEntity<Map<String, Object>> memoryResponse = getMemoryInfo();

            ResponseEntity<Map<String, Object>> gcResponse = getGCInfo();

            if (memoryResponse.getStatusCode().is2xxSuccessful()) {
                fullStats.put("memory", memoryResponse.getBody());
            }
            if (gcResponse.getStatusCode().is2xxSuccessful()) {
                fullStats.put("garbage_collection", gcResponse.getBody());
            }

            log.info("üìä API: –ó–∞–ø–∏—Ç–∞–Ω–æ –ø–æ–≤–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º–∏");
            return ResponseEntity.ok(fullStats);

        } catch (Exception e) {
            log.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ–≤–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {}", e.getMessage());
            return ResponseEntity.internalServerError()
                    .body(Map.of(
                            "status", "error",
                            "message", e.getMessage(),
                            "icon", "‚ùå",
                            "description", "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ–≤–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
                    ));
        }
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ —Å–±–æ—Ä–∫–∏ –º—É—Å–æ—Ä–∞
     * POST /api/monitoring/gc/force
     */
    @PostMapping("/gc/force")
    public ResponseEntity<Map<String, Object>> forceGarbageCollection() {
        try {
            log.warn("üóëÔ∏è API: –ü—Ä–∏–º—É—Å–æ–≤–∏–π –≤–∏–∫–ª–∏–∫ –∑–±–∏—Ä–∞—á–∞ —Å–º—ñ—Ç—Ç—è —á–µ—Ä–µ–∑ API");

            long beforeMemory = memoryBean.getHeapMemoryUsage().getUsed() / (1024 * 1024);
            long startTime = System.currentTimeMillis();

            // –í—ã–∑–æ–≤ GC
            System.gc();

            // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è GC
            Thread.sleep(1000);

            long afterMemory = memoryBean.getHeapMemoryUsage().getUsed() / (1024 * 1024);
            long endTime = System.currentTimeMillis();
            long freed = beforeMemory - afterMemory;
            long duration = endTime - startTime;

            Map<String, Object> result = new HashMap<>();
            result.put("timestamp", LocalDateTime.now());
            result.put("status", "completed");
            result.put("icon", "üóëÔ∏è");
            result.put("title", "–ó–±–∏—Ä–∞—á —Å–º—ñ—Ç—Ç—è –∑–∞–ø—É—â–µ–Ω–æ");
            result.put("description", "–ü—Ä–∏–º—É—Å–æ–≤–µ –æ—á–∏—â–µ–Ω–Ω—è –ø–∞–º'—è—Ç—ñ –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
            result.put("memory_before_mb", beforeMemory);
            result.put("memory_after_mb", afterMemory);
            result.put("memory_freed_mb", freed);
            result.put("freed_icon", freed > 0 ? "‚úÖ" : "‚ÑπÔ∏è");
            result.put("duration_ms", duration);
            result.put("warning", "–ü—Ä–∏–º—É—Å–æ–≤–∏–π GC –º–æ–∂–µ –≤–ø–ª–∏–≤–∞—Ç–∏ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å");
            result.put("warning_icon", "‚ö†Ô∏è");

            log.info("üóëÔ∏è –ü—Ä–∏–º—É—Å–æ–≤–∏–π –∑–±–∏—Ä–∞—á —Å–º—ñ—Ç—Ç—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ó–≤—ñ–ª—å–Ω–µ–Ω–æ: {} MB –∑–∞ {} –º—Å", freed, duration);
            return ResponseEntity.ok(result);

        } catch (Exception e) {
            log.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º—É—Å–æ–≤–æ–º—É –∑–±–∏—Ä–∞–Ω–Ω—ñ —Å–º—ñ—Ç—Ç—è: {}", e.getMessage());
            return ResponseEntity.internalServerError()
                    .body(Map.of(
                            "status", "error",
                            "message", e.getMessage(),
                            "icon", "‚ùå",
                            "description", "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –∑–±–∏—Ä–∞—á–∞ —Å–º—ñ—Ç—Ç—è"
                    ));
        }
    }


    private String getUsageStatus(double usagePercent) {
        if (usagePercent > 90) return "critical";
        if (usagePercent > 80) return "warning";
        if (usagePercent > 60) return "moderate";
        return "good";
    }

    private Map<String, Object> calculateSessionMemory(Integer activeSessions) {
        Map<String, Object> memoryCalc = new HashMap<>();

        if (activeSessions == null || activeSessions == 0) {
            memoryCalc.put("total_mb", 0.0);
            memoryCalc.put("per_session_kb", 0);
            return memoryCalc;
        }

        // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–∞–º—è—Ç–∏ –Ω–∞ —Å–µ—Å—Å–∏—é
        int estimatedBytesPerSession = 3 * 1024; // 3KB –≤ —Å—Ä–µ–¥–Ω–µ–º
        long totalSessionMemory = (long) activeSessions * estimatedBytesPerSession;
        double sessionMemoryMB = totalSessionMemory / (1024.0 * 1024.0);

        memoryCalc.put("total_mb", Math.round(sessionMemoryMB * 100.0) / 100.0);
        memoryCalc.put("per_session_kb", estimatedBytesPerSession / 1024);
        memoryCalc.put("estimation_note", "–ü—Ä–∏–±–ª–∏–∑–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Å–µ—Ä–µ–¥–Ω—ñ—Ö –∑–Ω–∞—á–µ–Ω—å");
        memoryCalc.put("icon", "üíæ");

        return memoryCalc;
    }
}