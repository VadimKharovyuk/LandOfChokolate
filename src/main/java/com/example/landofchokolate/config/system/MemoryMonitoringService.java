//package com.example.landofchokolate.config.system;
//
//import lombok.Getter;
//import lombok.extern.slf4j.Slf4j;
//import org.springframework.scheduling.annotation.Scheduled;
//import org.springframework.stereotype.Service;
//
//import javax.management.MBeanServer;
//import java.lang.management.ManagementFactory;
//import java.lang.management.MemoryMXBean;
//import java.lang.management.MemoryUsage;
//import java.text.DecimalFormat;
//
//@Service
//@Slf4j
//public class MemoryMonitoringService {
//
//    private final MemoryMXBean memoryBean;
//    private final MBeanServer mBeanServer;
//    private final DecimalFormat df = new DecimalFormat("#.##");
//
//    public MemoryMonitoringService() {
//        this.memoryBean = ManagementFactory.getMemoryMXBean();
//        this.mBeanServer = ManagementFactory.getPlatformMBeanServer();
//    }
//
//    /**
//     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞–º—è—Ç–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
//     */
//    @Scheduled(fixedRate = 300000) // 5 –º–∏–Ω—É—Ç = 300000 –º—Å
//    public void logMemoryStatistics() {
//        logJVMMemoryUsage();
//        logGarbageCollectionInfo();
//    }
//
//
//
//    /**
//     * –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ JVM
//     */
//    public void logJVMMemoryUsage() {
//        MemoryUsage heapMemory = memoryBean.getHeapMemoryUsage();
//        MemoryUsage nonHeapMemory = memoryBean.getNonHeapMemoryUsage();
//
//        // Heap –ø–∞–º—è—Ç—å (–æ—Å–Ω–æ–≤–Ω–∞—è –ø–∞–º—è—Ç—å –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤)
//        long heapUsed = heapMemory.getUsed() / (1024 * 1024);
//        long heapMax = heapMemory.getMax() / (1024 * 1024);
//        long heapFree = heapMax - heapUsed;
//        double heapUsagePercent = ((double) heapUsed / heapMax) * 100;
//
//        // Non-Heap –ø–∞–º—è—Ç—å (–º–µ—Ç–∞–∫–ª–∞—Å—Å—ã, –∫–æ–¥)
//        long nonHeapUsed = nonHeapMemory.getUsed() / (1024 * 1024);
//        long nonHeapMax = nonHeapMemory.getMax() / (1024 * 1024);
//
//        log.info("üìä === JVM –ü–ê–ú–Ø–¢–¨ –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===");
//        log.info("üî∑ HEAP –ü–ê–ú–Ø–¢–¨: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {} MB / {} MB ({}%), –°–≤–æ–±–æ–¥–Ω–æ: {} MB",
//                heapUsed, heapMax, df.format(heapUsagePercent), heapFree);
//        log.info("üî∂ NON-HEAP –ü–ê–ú–Ø–¢–¨: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {} MB / {} MB",
//                nonHeapUsed, nonHeapMax > 0 ? nonHeapMax : "unlimited");
//
//        // –°–∏—Å—Ç–µ–º–Ω–∞—è –ø–∞–º—è—Ç—å
//        Runtime runtime = Runtime.getRuntime();
//        long totalMemory = runtime.totalMemory() / (1024 * 1024);
//        long freeMemory = runtime.freeMemory() / (1024 * 1024);
//        long maxMemory = runtime.maxMemory() / (1024 * 1024);
//
//        log.info("üíæ –°–ò–°–¢–ï–ú–ù–ê–Ø –ü–ê–ú–Ø–¢–¨: –û–±—â–∞—è: {} MB, –°–≤–æ–±–æ–¥–Ω–∞—è: {} MB, –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: {} MB",
//                totalMemory, freeMemory, maxMemory);
//    }
//
//
//
//    /**
//     * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–±–æ—Ä—â–∏–∫–µ –º—É—Å–æ—Ä–∞
//     */
//    private void logGarbageCollectionInfo() {
//        try {
//            ManagementFactory.getGarbageCollectorMXBeans().forEach(gcBean -> {
//                log.info("üóëÔ∏è GC {}: –ö–æ–ª–ª–µ–∫—Ü–∏–π: {}, –í—Ä–µ–º—è: {} –º—Å",
//                        gcBean.getName(),
//                        gcBean.getCollectionCount(),
//                        gcBean.getCollectionTime());
//            });
//        } catch (Exception e) {
//            log.debug("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ GC: {}", e.getMessage());
//        }
//    }
//
//    /**
//     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏
//     */
//    public MemoryInfo getMemoryInfo() {
//        MemoryUsage heapMemory = memoryBean.getHeapMemoryUsage();
//
//        long usedMB = heapMemory.getUsed() / (1024 * 1024);
//        long maxMB = heapMemory.getMax() / (1024 * 1024);
//        long freeMB = maxMB - usedMB;
//        double usagePercent = ((double) usedMB / maxMB) * 100;
//
//        return new MemoryInfo(usedMB, freeMB, maxMB, usagePercent);
//    }
//
//    /**
//     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ —Å–±–æ—Ä–∫–∏ –º—É—Å–æ—Ä–∞ (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!)
//     */
//    public void forceGarbageCollection() {
//        log.info("üóëÔ∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ —Å–±–æ—Ä–∫–∏ –º—É—Å–æ—Ä–∞...");
//        long beforeMemory = memoryBean.getHeapMemoryUsage().getUsed() / (1024 * 1024);
//
//        System.gc();
//
//        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è GC
//        try {
//            Thread.sleep(1000);
//        } catch (InterruptedException e) {
//            Thread.currentThread().interrupt();
//        }
//
//        long afterMemory = memoryBean.getHeapMemoryUsage().getUsed() / (1024 * 1024);
//        long freed = beforeMemory - afterMemory;
//
//        log.info("üóëÔ∏è –°–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ: {} MB", freed);
//    }
//
//    /**
//     * –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–º—è—Ç–∏
//     */
//    @Getter
//    public static class MemoryInfo {
//        private final long usedMemoryMB;
//        private final long freeMemoryMB;
//        private final long maxMemoryMB;
//        private final double usagePercentageValue;
//
//        public MemoryInfo(long usedMemoryMB, long freeMemoryMB, long maxMemoryMB, double usagePercentageValue) {
//            this.usedMemoryMB = usedMemoryMB;
//            this.freeMemoryMB = freeMemoryMB;
//            this.maxMemoryMB = maxMemoryMB;
//            this.usagePercentageValue = usagePercentageValue;
//        }
//
//        public String getUsagePercentage() { return new DecimalFormat("#.##").format(usagePercentageValue); }
//    }
//}


package com.example.landofchokolate.config.system;

import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import javax.management.MBeanServer;
import java.lang.management.ManagementFactory;
import java.lang.management.MemoryMXBean;
import java.lang.management.MemoryUsage;
import java.text.DecimalFormat;

@Service
@Slf4j
public class MemoryMonitoringService {

    private final MemoryMXBean memoryBean;
    private final MBeanServer mBeanServer;
    private final DecimalFormat df;

    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è 512 MB –ª–∏–º–∏—Ç–∞ Render
    private static final long RENDER_MEMORY_LIMIT_MB = 512;
    private static final long CRITICAL_THRESHOLD_MB = 460; // 90% –æ—Ç –ª–∏–º–∏—Ç–∞
    private static final long WARNING_THRESHOLD_MB = 410;  // 80% –æ—Ç –ª–∏–º–∏—Ç–∞

    public MemoryMonitoringService() {
        this.memoryBean = ManagementFactory.getMemoryMXBean();
        this.mBeanServer = ManagementFactory.getPlatformMBeanServer();

        // –°–æ–∑–¥–∞–µ–º DecimalFormat —Å —Ç–æ—á–∫–æ–π –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º
        this.df = new DecimalFormat("#.##");
        this.df.setDecimalFormatSymbols(java.text.DecimalFormatSymbols.getInstance(java.util.Locale.US));
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞–º—è—Ç–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
     */
    @Scheduled(fixedRate = 300000)
    public void logMemoryStatistics() {
        logJVMMemoryUsage();
        logGarbageCollectionInfo();
        analyzeMemoryForRender();
    }

    /**
     * –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
     */
    @Scheduled(fixedRate = 60000) // –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    public void criticalMemoryCheck() {
        MemoryUsage heapMemory = memoryBean.getHeapMemoryUsage();
        MemoryUsage nonHeapMemory = memoryBean.getNonHeapMemoryUsage();

        long totalUsedMB = (heapMemory.getUsed() + nonHeapMemory.getUsed()) / (1024 * 1024);

        if (totalUsedMB > CRITICAL_THRESHOLD_MB) {
            log.error("üö® –ö–†–ò–¢–ò–ß–ù–û! –ü–∞–º—è—Ç—å: {} MB / {} MB - –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç –∫—Ä–∞—à–Ω—É—Ç—å—Å—è!",
                    totalUsedMB, RENDER_MEMORY_LIMIT_MB);
            log.error("üí° –°–†–û–ß–ù–û: –ù—É–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –ø–∞–º—è—Ç—å –Ω–∞ Render –∏–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥!");

            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º —É—Ä–æ–≤–Ω–µ
            forceGarbageCollection();
        } else if (totalUsedMB > WARNING_THRESHOLD_MB) {
            log.warn("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ü–∞–º—è—Ç—å {} MB / {} MB - –±–ª–∏–∑–∫–æ –∫ –ª–∏–º–∏—Ç—É!",
                    totalUsedMB, RENDER_MEMORY_LIMIT_MB);
        }
    }

    /**
     * –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ JVM —Å –∞–Ω–∞–ª–∏–∑–æ–º –¥–ª—è Render
     */
    public void logJVMMemoryUsage() {
        MemoryUsage heapMemory = memoryBean.getHeapMemoryUsage();
        MemoryUsage nonHeapMemory = memoryBean.getNonHeapMemoryUsage();

        // Heap –ø–∞–º—è—Ç—å (–æ—Å–Ω–æ–≤–Ω–∞—è –ø–∞–º—è—Ç—å –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤)
        long heapUsed = heapMemory.getUsed() / (1024 * 1024);
        long heapMax = heapMemory.getMax() / (1024 * 1024);
        long heapFree = heapMax - heapUsed;
        double heapUsagePercent = ((double) heapUsed / heapMax) * 100;

        // Non-Heap –ø–∞–º—è—Ç—å (–º–µ—Ç–∞–∫–ª–∞—Å—Å—ã, –∫–æ–¥)
        long nonHeapUsed = nonHeapMemory.getUsed() / (1024 * 1024);
        long nonHeapMax = nonHeapMemory.getMax() / (1024 * 1024);

        // –°–∏—Å—Ç–µ–º–Ω–∞—è –ø–∞–º—è—Ç—å
        Runtime runtime = Runtime.getRuntime();
        long totalMemory = runtime.totalMemory() / (1024 * 1024);
        long freeMemory = runtime.freeMemory() / (1024 * 1024);
        long maxMemory = runtime.maxMemory() / (1024 * 1024);

        // –û–±—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
        long totalUsedMemory = heapUsed + nonHeapUsed;
        double renderUsagePercent = ((double) totalUsedMemory / RENDER_MEMORY_LIMIT_MB) * 100;

        log.info("üìä === JVM –ü–ê–ú–Ø–¢–¨ –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===");
        log.info("üî∑ HEAP –ü–ê–ú–Ø–¢–¨: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {} MB / {} MB ({}%), –°–≤–æ–±–æ–¥–Ω–æ: {} MB",
                heapUsed, heapMax, df.format(heapUsagePercent), heapFree);
        log.info("üî∂ NON-HEAP –ü–ê–ú–Ø–¢–¨: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {} MB / {} MB",
                nonHeapUsed, nonHeapMax > 0 ? nonHeapMax : "unlimited");
        log.info("üíæ –°–ò–°–¢–ï–ú–ù–ê–Ø –ü–ê–ú–Ø–¢–¨: –û–±—â–∞—è: {} MB, –°–≤–æ–±–æ–¥–Ω–∞—è: {} MB, –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: {} MB",
                totalMemory, freeMemory, maxMemory);

        // –ö–†–ò–¢–ò–ß–ù–û! –ê–Ω–∞–ª–∏–∑ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ª–∏–º–∏—Ç–∞ Render
        log.info("üöÄ === –ê–ù–ê–õ–ò–ó –î–õ–Ø RENDER (512 MB –õ–ò–ú–ò–¢) ===");
        log.info("üìà –û–ë–©–ï–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï: {} MB / {} MB ({}%)",
                totalUsedMemory, RENDER_MEMORY_LIMIT_MB, df.format(renderUsagePercent));

        long remainingMemory = RENDER_MEMORY_LIMIT_MB - totalUsedMemory;
        log.info("üÜì –û–°–¢–ê–õ–û–°–¨ –ü–ê–ú–Ø–¢–ò: {} MB", remainingMemory);

        // –°—Ç–∞—Ç—É—Å –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if (renderUsagePercent > 90) {
            log.error("üî• –ö–†–ò–¢–ò–ß–ù–û: –û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ {} MB! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç –∫—Ä–∞—à–Ω—É—Ç—å—Å—è!", remainingMemory);
        } else if (renderUsagePercent > 80) {
            log.warn("‚ö†Ô∏è –í–´–°–û–ö–û–ï –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –û—Å—Ç–∞–ª–æ—Å—å {} MB. –ù—É–∂–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è!", remainingMemory);
        } else if (renderUsagePercent > 60) {
            log.info("üü° –£–ú–ï–†–ï–ù–ù–û–ï –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {} MB —Å–≤–æ–±–æ–¥–Ω–æ", remainingMemory);
        } else {
            log.info("üü¢ –•–û–†–û–®–ï–ï –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {} MB –∑–∞–ø–∞—Å–∞", remainingMemory);
        }
    }

    /**
     * –ê–Ω–∞–ª–∏–∑ –ø–∞–º—è—Ç–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è Render
     */
    private void analyzeMemoryForRender() {
        MemoryUsage heapMemory = memoryBean.getHeapMemoryUsage();
        MemoryUsage nonHeapMemory = memoryBean.getNonHeapMemoryUsage();

        long heapUsed = heapMemory.getUsed() / (1024 * 1024);
        long nonHeapUsed = nonHeapMemory.getUsed() / (1024 * 1024);
        long totalUsed = heapUsed + nonHeapUsed;

        log.info("üéØ === –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø RENDER ===");

        // –ê–Ω–∞–ª–∏–∑ Non-Heap (—á–∞—Å—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ –≤ Java)
        if (nonHeapUsed > 100) {
            log.warn("‚ö†Ô∏è Non-Heap –ø–∞–º—è—Ç—å {} MB —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫–∞! –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:", nonHeapUsed);
            log.warn("   üí° –î–æ–±–∞–≤—å—Ç–µ –≤ JVM: -XX:MaxMetaspaceSize=64m");
            log.warn("   üí° –î–æ–±–∞–≤—å—Ç–µ –≤ JVM: -XX:CompressedClassSpaceSize=32m");
        }

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ JVM –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
        long heapMax = heapMemory.getMax() / (1024 * 1024);
        if (heapMax > 300) {
            log.warn("‚ö†Ô∏è Heap –ª–∏–º–∏—Ç {} MB —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫ –¥–ª—è 512 MB! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ -Xmx350m", heapMax);
        }

        // –ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ—Ö–≤–∞—Ç–∫–∏ –ø–∞–º—è—Ç–∏
        if (totalUsed > WARNING_THRESHOLD_MB) {
            long timeToLimit = estimateTimeToMemoryLimit();
            if (timeToLimit > 0) {
                log.warn("‚è∞ –ü—Ä–∏ —Ç–µ–∫—É—â–µ–º —Ä–æ—Å—Ç–µ –ø–∞–º—è—Ç—å –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ {} –º–∏–Ω—É—Ç", timeToLimit);
            }
        }

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º Render
        if (totalUsed > CRITICAL_THRESHOLD_MB) {
            log.error("üí∞ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –û–±–Ω–æ–≤–∏—Ç–µ Render –¥–æ 1 GB ($25/–º–µ—Å) –∏–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ");
        }
    }

    /**
     * –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
     */
    private long estimateTimeToMemoryLimit() {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–æ—Å—Ç–∞ –ø–∞–º—è—Ç–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–∏
        // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é –æ—Ü–µ–Ω–∫—É
        return -1; // –ù–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
    }

    /**
     * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–±–æ—Ä—â–∏–∫–µ –º—É—Å–æ—Ä–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º
     */
    private void logGarbageCollectionInfo() {
        try {
            log.info("üóëÔ∏è === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ë–û–†–ö–ò –ú–£–°–û–†–ê ===");
            ManagementFactory.getGarbageCollectorMXBeans().forEach(gcBean -> {
                long collections = gcBean.getCollectionCount();
                long time = gcBean.getCollectionTime();

                log.info("üóëÔ∏è GC {}: –ö–æ–ª–ª–µ–∫—Ü–∏–π: {}, –í—Ä–µ–º—è: {} –º—Å",
                        gcBean.getName(), collections, time);

                // –ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–æ—Ç—ã GC
                if (collections > 100) {
                    log.warn("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–π GC! –í–æ–∑–º–æ–∂–Ω–æ –Ω–µ—Ö–≤–∞—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –∏–ª–∏ —É—Ç–µ—á–∫–∏");
                }

                if (time > 5000) {
                    log.warn("‚ö†Ô∏è GC —Ç—Ä–∞—Ç–∏—Ç –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {} –º—Å. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Ç–æ—Ä–º–æ–∑–∏—Ç—å", time);
                }
            });
        } catch (Exception e) {
            log.debug("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ GC: {}", e.getMessage());
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏ –¥–ª—è API/–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     */
    public DetailedMemoryInfo getDetailedMemoryInfo() {
        MemoryUsage heapMemory = memoryBean.getHeapMemoryUsage();
        MemoryUsage nonHeapMemory = memoryBean.getNonHeapMemoryUsage();
        Runtime runtime = Runtime.getRuntime();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã
        if (heapMemory == null || nonHeapMemory == null) {
            throw new RuntimeException("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏ JVM");
        }

        // Heap –ø–∞–º—è—Ç—å
        long heapUsedMB = heapMemory.getUsed() / (1024 * 1024);
        long heapMaxMB = heapMemory.getMax() / (1024 * 1024);
        long heapFreeMB = heapMaxMB - heapUsedMB;
        double heapUsagePercent = ((double) heapUsedMB / heapMaxMB) * 100;

        // Non-Heap –ø–∞–º—è—Ç—å
        long nonHeapUsedMB = nonHeapMemory.getUsed() / (1024 * 1024);
        long nonHeapMaxMB = nonHeapMemory.getMax() / (1024 * 1024);

        // –°–∏—Å—Ç–µ–º–Ω–∞—è –ø–∞–º—è—Ç—å
        long systemTotalMB = runtime.totalMemory() / (1024 * 1024);
        long systemFreeMB = runtime.freeMemory() / (1024 * 1024);
        long systemMaxMB = runtime.maxMemory() / (1024 * 1024);

        // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è Render
        long totalUsedMB = heapUsedMB + nonHeapUsedMB;
        double renderUsagePercent = ((double) totalUsedMB / RENDER_MEMORY_LIMIT_MB) * 100;
        long remainingMB = RENDER_MEMORY_LIMIT_MB - totalUsedMB;

        // –°—Ç–∞—Ç—É—Å –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        String status = getMemoryStatus(renderUsagePercent);
        String statusIcon = getMemoryStatusIcon(renderUsagePercent);
        String statusText = getMemoryStatusText(renderUsagePercent);
        String usageStatus = getUsageStatus(renderUsagePercent);
        String recommendation = getMemoryRecommendation(renderUsagePercent, nonHeapUsedMB);

        return new DetailedMemoryInfo(
                heapUsedMB, heapFreeMB, heapMaxMB, heapUsagePercent, statusIcon, statusText, usageStatus,
                nonHeapUsedMB, nonHeapMaxMB,
                systemTotalMB, systemFreeMB, systemMaxMB,
                totalUsedMB, RENDER_MEMORY_LIMIT_MB, renderUsagePercent, remainingMB,
                status, recommendation
        );
    }

    private String getMemoryStatusIcon(double renderUsagePercent) {
        if (renderUsagePercent > 90) return "üî¥";
        if (renderUsagePercent > 80) return "üü°";
        if (renderUsagePercent > 60) return "üü†";
        return "üü¢";
    }

    private String getMemoryStatusText(double renderUsagePercent) {
        if (renderUsagePercent > 90) return "–ö—Ä–∏—Ç–∏—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å";
        if (renderUsagePercent > 80) return "–í–∏—Å–æ–∫–∏–π —Ä—ñ–≤–µ–Ω—å";
        if (renderUsagePercent > 60) return "–ü–æ–º—ñ—Ä–Ω–∏–π —Ä—ñ–≤–µ–Ω—å";
        return "–ù–æ—Ä–º–∞–ª—å–Ω–∏–π —Ä—ñ–≤–µ–Ω—å";
    }

    private String getUsageStatus(double renderUsagePercent) {
        if (renderUsagePercent > 90) return "critical";
        if (renderUsagePercent > 80) return "warning";
        if (renderUsagePercent > 60) return "moderate";
        return "good";
    }


    public EnhancedMemoryInfo getEnhancedMemoryInfo() {
        MemoryUsage heapMemory = memoryBean.getHeapMemoryUsage();
        MemoryUsage nonHeapMemory = memoryBean.getNonHeapMemoryUsage();

        long heapUsedMB = heapMemory.getUsed() / (1024 * 1024);
        long heapMaxMB = heapMemory.getMax() / (1024 * 1024);
        long heapFreeMB = heapMaxMB - heapUsedMB;
        double heapUsagePercent = ((double) heapUsedMB / heapMaxMB) * 100;

        long nonHeapUsedMB = nonHeapMemory.getUsed() / (1024 * 1024);
        long nonHeapMaxMB = nonHeapMemory.getMax() / (1024 * 1024);

        long totalUsedMB = heapUsedMB + nonHeapUsedMB;
        double renderUsagePercent = ((double) totalUsedMB / RENDER_MEMORY_LIMIT_MB) * 100;
        long remainingMB = RENDER_MEMORY_LIMIT_MB - totalUsedMB;

        String status = getMemoryStatus(renderUsagePercent);
        String recommendation = getMemoryRecommendation(renderUsagePercent, nonHeapUsedMB);

        return new EnhancedMemoryInfo(heapUsedMB, heapFreeMB, heapMaxMB, heapUsagePercent,
                nonHeapUsedMB, nonHeapMaxMB, totalUsedMB, RENDER_MEMORY_LIMIT_MB,
                renderUsagePercent, remainingMB, status, recommendation);
    }

    private String getMemoryStatus(double renderUsagePercent) {
        if (renderUsagePercent > 90) return "CRITICAL";
        if (renderUsagePercent > 80) return "WARNING";
        if (renderUsagePercent > 60) return "MODERATE";
        return "GOOD";
    }

    private String getMemoryRecommendation(double renderUsagePercent, long nonHeapUsedMB) {
        if (renderUsagePercent > 90) {
            return "–°—Ä–æ—á–Ω–æ —É–≤–µ–ª–∏—á—å—Ç–µ –ø–∞–º—è—Ç—å –Ω–∞ Render –¥–æ 1GB –∏–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!";
        }
        if (renderUsagePercent > 80) {
            return "–î–æ–±–∞–≤—å—Ç–µ JVM —Ñ–ª–∞–≥–∏: -XX:MaxMetaspaceSize=64m -Xmx350m";
        }
        if (nonHeapUsedMB > 100) {
            return "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ Non-Heap –ø–∞–º—è—Ç—å: -XX:MaxMetaspaceSize=64m";
        }
        return "–ü–∞–º—è—Ç—å –∏—Å–ø–æ–ª—å–∑–µ—Ç—Å—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ";
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ —Å–±–æ—Ä–∫–∏ –º—É—Å–æ—Ä–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
     */
    public void forceGarbageCollection() {
        log.info("üóëÔ∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ —Å–±–æ—Ä–∫–∏ –º—É—Å–æ—Ä–∞...");

        MemoryUsage beforeHeap = memoryBean.getHeapMemoryUsage();
        MemoryUsage beforeNonHeap = memoryBean.getNonHeapMemoryUsage();
        long beforeTotal = (beforeHeap.getUsed() + beforeNonHeap.getUsed()) / (1024 * 1024);

        System.gc();

        try {
            Thread.sleep(2000); // –ñ–¥–µ–º –¥–æ–ª—å—à–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }

        MemoryUsage afterHeap = memoryBean.getHeapMemoryUsage();
        MemoryUsage afterNonHeap = memoryBean.getNonHeapMemoryUsage();
        long afterTotal = (afterHeap.getUsed() + afterNonHeap.getUsed()) / (1024 * 1024);

        long freedTotal = beforeTotal - afterTotal;
        long freedHeap = (beforeHeap.getUsed() - afterHeap.getUsed()) / (1024 * 1024);

        log.info("üóëÔ∏è –°–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:");
        log.info("   üìâ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –æ–±—â–µ–π –ø–∞–º—è—Ç–∏: {} MB", freedTotal);
        log.info("   üìâ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ Heap –ø–∞–º—è—Ç–∏: {} MB", freedHeap);
        log.info("   üìä –û–±—â–∞—è –ø–∞–º—è—Ç—å –ø–æ—Å–ª–µ GC: {} MB / {} MB", afterTotal, RENDER_MEMORY_LIMIT_MB);
    }

    /**
     * –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å –≤–∞—à–∏–º JSON —Ñ–æ—Ä–º–∞—Ç–æ–º)
     */
    @Getter
    public static class DetailedMemoryInfo {
        // Heap –ø–∞–º—è—Ç—å
        private final long heapUsedMB;
        private final long heapFreeMB;
        private final long heapMaxMB;
        private final double heapUsagePercent;
        private final String heapStatusIcon;
        private final String heapStatusText;
        private final String heapUsageStatus;

        // Non-Heap –ø–∞–º—è—Ç—å
        private final long nonHeapUsedMB;
        private final long nonHeapMaxMB;

        // –°–∏—Å—Ç–µ–º–Ω–∞—è –ø–∞–º—è—Ç—å
        private final long systemTotalMB;
        private final long systemFreeMB;
        private final long systemMaxMB;

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è Render
        private final long totalUsedMB;
        private final long renderLimitMB;
        private final double renderUsagePercent;
        private final long remainingMB;

        // –°—Ç–∞—Ç—É—Å –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        private final String status;
        private final String recommendation;

        public DetailedMemoryInfo(long heapUsedMB, long heapFreeMB, long heapMaxMB, double heapUsagePercent,
                                  String heapStatusIcon, String heapStatusText, String heapUsageStatus,
                                  long nonHeapUsedMB, long nonHeapMaxMB,
                                  long systemTotalMB, long systemFreeMB, long systemMaxMB,
                                  long totalUsedMB, long renderLimitMB, double renderUsagePercent, long remainingMB,
                                  String status, String recommendation) {
            this.heapUsedMB = heapUsedMB;
            this.heapFreeMB = heapFreeMB;
            this.heapMaxMB = heapMaxMB;
            this.heapUsagePercent = heapUsagePercent;
            this.heapStatusIcon = heapStatusIcon;
            this.heapStatusText = heapStatusText;
            this.heapUsageStatus = heapUsageStatus;
            this.nonHeapUsedMB = nonHeapUsedMB;
            this.nonHeapMaxMB = nonHeapMaxMB;
            this.systemTotalMB = systemTotalMB;
            this.systemFreeMB = systemFreeMB;
            this.systemMaxMB = systemMaxMB;
            this.totalUsedMB = totalUsedMB;
            this.renderLimitMB = renderLimitMB;
            this.renderUsagePercent = renderUsagePercent;
            this.remainingMB = remainingMB;
            this.status = status;
            this.recommendation = recommendation;
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (—Å —Ç–æ—á–∫–æ–π –¥–ª—è JSON)
        public String getHeapUsageFormatted() {
            DecimalFormat df = new DecimalFormat("#.##");
            df.setDecimalFormatSymbols(java.text.DecimalFormatSymbols.getInstance(java.util.Locale.US));
            return df.format(heapUsagePercent);
        }

        public String getRenderUsageFormatted() {
            DecimalFormat df = new DecimalFormat("#.##");
            df.setDecimalFormatSymbols(java.text.DecimalFormatSymbols.getInstance(java.util.Locale.US));
            return df.format(renderUsagePercent);
        }

        // –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –≤–∞—à–∏–º JSON —Ñ–æ—Ä–º–∞—Ç–æ–º
        public Object toCompatibleFormat() {
            return new Object() {
                public final String title = "–ü–∞–º'—è—Ç—å JVM";
                public final String icon = "üíæ";
                public final String description = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞–º'—è—Ç—ñ –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–æ—ó –º–∞—à–∏–Ω–∏ Java";
                public final String timestamp = java.time.LocalDateTime.now().toString();
                public final String status = DetailedMemoryInfo.this.status.toLowerCase();

                public final Object heap = new Object() {
                    public final long used_mb = heapUsedMB;
                    public final long free_mb = heapFreeMB;
                    public final long max_mb = heapMaxMB;
                    public final double usage_percent = heapUsagePercent; // –ò—Å–ø–æ–ª—å–∑—É–µ–º double –Ω–∞–ø—Ä—è–º—É—é
                    public final String icon = "üî∑";
                    public final String name = "Heap –ø–∞–º'—è—Ç—å";
                    public final String description = "–û—Å–Ω–æ–≤–Ω–∞ –ø–∞–º'—è—Ç—å –¥–ª—è –æ–±'—î–∫—Ç—ñ–≤ –ø—Ä–æ–≥—Ä–∞–º–∏";
                    public final String status_icon = heapStatusIcon;
                    public final String status_text = heapStatusText;
                    public final String usage_status = heapUsageStatus;
                };

                public final Object non_heap = new Object() {
                    public final long used_mb = nonHeapUsedMB;
                    public final long max_mb = nonHeapMaxMB > 0 ? nonHeapMaxMB : -1;
                    public final String icon = "üî∂";
                    public final String name = "Non-Heap –ø–∞–º'—è—Ç—å";
                    public final String description = "–ü–∞–º'—è—Ç—å –¥–ª—è –º–µ—Ç–∞–∫–ª–∞—Å—ñ–≤ —Ç–∞ –∫–æ–¥—É JVM";
                };

                public final Object system = new Object() {
                    public final long total_mb = systemTotalMB;
                    public final long free_mb = systemFreeMB;
                    public final long max_mb = systemMaxMB;
                    public final String icon = "üñ•Ô∏è";
                    public final String name = "–°–∏—Å—Ç–µ–º–Ω–∞ –ø–∞–º'—è—Ç—å";
                    public final String description = "–ó–∞–≥–∞–ª—å–Ω–∞ –ø–∞–º'—è—Ç—å –ø—Ä–æ—Ü–µ—Å—É JVM";
                };

                public final Object render_analysis = new Object() {
                    public final long total_used_mb = totalUsedMB;
                    public final long limit_mb = renderLimitMB;
                    public final double usage_percent = renderUsagePercent; // –ò—Å–ø–æ–ª—å–∑—É–µ–º double –Ω–∞–ø—Ä—è–º—É—é
                    public final long remaining_mb = remainingMB;
                    public final String recommendation = DetailedMemoryInfo.this.recommendation;
                    public final String icon = "üöÄ";
                    public final String name = "–ê–Ω–∞–ª—ñ–∑ –¥–ª—è Render";
                    public final String description = "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞–º'—è—Ç—ñ –≤—ñ–¥–Ω–æ—Å–Ω–æ –ª—ñ–º—ñ—Ç—É —Ö–æ—Å—Ç–∏–Ω–≥—É";
                };
            };
        }
    }
    @Getter
    public static class EnhancedMemoryInfo {
        private final long heapUsedMB;
        private final long heapFreeMB;
        private final long heapMaxMB;
        private final double heapUsagePercent;

        private final long nonHeapUsedMB;
        private final long nonHeapMaxMB;

        private final long totalUsedMB;
        private final long renderLimitMB;
        private final double renderUsagePercent;
        private final long remainingMB;

        private final String status;
        private final String recommendation;

        public EnhancedMemoryInfo(long heapUsedMB, long heapFreeMB, long heapMaxMB, double heapUsagePercent,
                                  long nonHeapUsedMB, long nonHeapMaxMB, long totalUsedMB, long renderLimitMB,
                                  double renderUsagePercent, long remainingMB, String status, String recommendation) {
            this.heapUsedMB = heapUsedMB;
            this.heapFreeMB = heapFreeMB;
            this.heapMaxMB = heapMaxMB;
            this.heapUsagePercent = heapUsagePercent;
            this.nonHeapUsedMB = nonHeapUsedMB;
            this.nonHeapMaxMB = nonHeapMaxMB;
            this.totalUsedMB = totalUsedMB;
            this.renderLimitMB = renderLimitMB;
            this.renderUsagePercent = renderUsagePercent;
            this.remainingMB = remainingMB;
            this.status = status;
            this.recommendation = recommendation;
        }

        public String getHeapUsageFormatted() { return new DecimalFormat("#.##").format(heapUsagePercent); }
        public String getRenderUsageFormatted() { return new DecimalFormat("#.##").format(renderUsagePercent); }
    }

    // –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    @Getter
    public static class MemoryInfo {
        private final long usedMemoryMB;
        private final long freeMemoryMB;
        private final long maxMemoryMB;
        private final double usagePercentageValue;

        public MemoryInfo(long usedMemoryMB, long freeMemoryMB, long maxMemoryMB, double usagePercentageValue) {
            this.usedMemoryMB = usedMemoryMB;
            this.freeMemoryMB = freeMemoryMB;
            this.maxMemoryMB = maxMemoryMB;
            this.usagePercentageValue = usagePercentageValue;
        }

        public String getUsagePercentage() {
            DecimalFormat df = new DecimalFormat("#.##");
            df.setDecimalFormatSymbols(java.text.DecimalFormatSymbols.getInstance(java.util.Locale.US));
            return df.format(usagePercentageValue);
        }
    }
}