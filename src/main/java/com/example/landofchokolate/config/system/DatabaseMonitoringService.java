package com.example.landofchokolate.config.system;

import com.zaxxer.hikari.HikariDataSource;
import com.zaxxer.hikari.HikariPoolMXBean;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import javax.sql.DataSource;
import java.text.DecimalFormat;
import java.time.LocalDateTime;
import java.util.concurrent.atomic.AtomicLong;

@Service
@Slf4j
public class DatabaseMonitoringService {

    @Autowired
    private DataSource dataSource;

    private final DecimalFormat df;
    private final AtomicLong totalQueriesProcessed = new AtomicLong(0);
    private final AtomicLong slowQueriesCount = new AtomicLong(0);

    // –ü–æ—Ä–æ–≥–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    private static final int OPTIMAL_POOL_SIZE = 10; // –î–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    private static final double HIGH_USAGE_THRESHOLD = 80.0; // 80% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—É–ª–∞
    private static final double CRITICAL_USAGE_THRESHOLD = 95.0; // 95% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—É–ª–∞

    public DatabaseMonitoringService() {
        this.df = new DecimalFormat("#.##");
        this.df.setDecimalFormatSymbols(java.text.DecimalFormatSymbols.getInstance(java.util.Locale.US));
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ë–î –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
     */
    @Scheduled(fixedRate = 300000)
    public void logDatabaseStatistics() {
        if (dataSource instanceof HikariDataSource) {
            HikariDataSource hikari = (HikariDataSource) dataSource;
            HikariPoolMXBean poolMXBean = hikari.getHikariPoolMXBean();

            int activeConnections = poolMXBean.getActiveConnections();
            int idleConnections = poolMXBean.getIdleConnections();
            int threadsAwaitingConnection = poolMXBean.getThreadsAwaitingConnection();
            int totalConnections = poolMXBean.getTotalConnections();

            log.info("üóÑÔ∏è === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–î –ü–£–õ–ê ===");
            log.info("üîó –°–û–ï–î–ò–ù–ï–ù–ò–Ø: –ê–∫—Ç–∏–≤–Ω—ã–µ: {}, –ü—Ä–æ—Å—Ç–∞–∏–≤–∞—é—â–∏–µ: {}, –û–∂–∏–¥–∞—é—â–∏–µ: {}, –û–±—â–µ–µ: {}",
                    activeConnections, idleConnections, threadsAwaitingConnection, totalConnections);

            // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ HikariCP
            logDetailedHikariStats(hikari, poolMXBean);

            // –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—É–ª–∞
            analyzeConnectionPoolEfficiency(activeConnections, idleConnections,
                    threadsAwaitingConnection, totalConnections);

            // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            provideOptimizationRecommendations(hikari, activeConnections,
                    idleConnections, totalConnections);
        } else {
            log.warn("‚ö†Ô∏è DataSource –Ω–µ —è–≤–ª—è–µ—Ç—Å—è HikariDataSource. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {}",
                    dataSource.getClass().getSimpleName());
        }
    }

    /**
     * –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ HikariCP
     */
    private void logDetailedHikariStats(HikariDataSource hikari, HikariPoolMXBean poolMXBean) {
        try {
            // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É–ª–∞
            int maxPoolSize = hikari.getMaximumPoolSize();
            int minPoolSize = hikari.getMinimumIdle();
            long connectionTimeout = hikari.getConnectionTimeout();
            long idleTimeout = hikari.getIdleTimeout();
            long maxLifetime = hikari.getMaxLifetime();

            log.info("‚öôÔ∏è –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ü–£–õ–ê:");
            log.info("   üìè –†–∞–∑–º–µ—Ä: {} (–º–∏–Ω) - {} (–º–∞–∫—Å)", minPoolSize, maxPoolSize);
            log.info("   ‚è±Ô∏è –¢–∞–π–º–∞—É—Ç—ã: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: {} –º—Å, –ü—Ä–æ—Å—Ç–æ–π: {} –º—Å, –ñ–∏–∑–Ω—å: {} –º—Å",
                    connectionTimeout, idleTimeout, maxLifetime);

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ HikariCP
            log.info("üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:");

            // –≠—Ç–∏ –º–µ—Ç–æ–¥—ã –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –≤–µ—Ä—Å–∏—è—Ö HikariCP
            try {
                log.info("   üîÑ –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏: {}/{}",
                        poolMXBean.getActiveConnections(), maxPoolSize);

                double usagePercent = ((double) poolMXBean.getActiveConnections() / maxPoolSize) * 100;
                log.info("   üìà –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—É–ª–∞: {}%", df.format(usagePercent));

            } catch (Exception e) {
                log.debug("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–µ—Ç—Ä–∏–∫–∏ HikariCP –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {}", e.getMessage());
            }

        } catch (Exception e) {
            log.debug("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ HikariCP: {}", e.getMessage());
        }
    }

    /**
     * –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
     */
    private void analyzeConnectionPoolEfficiency(int active, int idle, int awaiting, int total) {
        log.info("üîç === –ê–ù–ê–õ–ò–ó –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò –ü–£–õ–ê ===");

        // –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if (awaiting > 0) {
            log.error("üö® –ü–†–û–ë–õ–ï–ú–ê: {} –ø–æ—Ç–æ–∫–æ–≤ –æ–∂–∏–¥–∞—é—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è! –ü—É–ª –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω!", awaiting);
            log.error("üí° –°–†–û–ß–ù–û: –£–≤–µ–ª–∏—á—å—Ç–µ —Ä–∞–∑–º–µ—Ä –ø—É–ª–∞ –∏–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å—ã");
        } else if (active == 0 && idle > 0) {
            log.info("üò¥ –ü–†–û–°–¢–û–ô: –ë–î –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–∞–∏–≤–∞—é—Ç");
        } else if (active > 0) {
            double activePercent = ((double) active / total) * 100;

            if (activePercent > CRITICAL_USAGE_THRESHOLD) {
                log.error("üî• –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—É–ª–∞: {}% ({}/{})",
                        df.format(activePercent), active, total);
            } else if (activePercent > HIGH_USAGE_THRESHOLD) {
                log.warn("‚ö†Ô∏è –í–´–°–û–ö–û–ï –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—É–ª–∞: {}% ({}/{})",
                        df.format(activePercent), active, total);
            } else {
                log.info("‚úÖ –ù–û–†–ú–ê–õ–¨–ù–û–ï –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—É–ª–∞: {}% ({}/{})",
                        df.format(activePercent), active, total);
            }
        }

        // –ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö/–ø—Ä–æ—Å—Ç–∞–∏–≤–∞—é—â–∏—Ö
        if (idle > active * 3 && active > 0) {
            log.info("üí° –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ú–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç–∞–∏–≤–∞—é—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π. –ú–æ–∂–Ω–æ —É–º–µ–Ω—å—à–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø—É–ª–∞");
        } else if (idle == 0 && active > 0) {
            log.warn("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—É–ª–∞");
        }
    }

    /**
     * –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è Render
     */
    private void provideOptimizationRecommendations(HikariDataSource hikari, int active, int idle, int total) {
        log.info("üí° === –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø RENDER ===");

        int maxPoolSize = hikari.getMaximumPoolSize();
        int minPoolSize = hikari.getMinimumIdle();

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–º–µ—Ä—É –ø—É–ª–∞ –¥–ª—è Render (512 MB –ø–∞–º—è—Ç–∏)
        if (maxPoolSize > 15) {
            log.warn("‚ö†Ô∏è –ü—É–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è Render! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∞–∫—Å–∏–º—É–º 10-12 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π");
            log.warn("   üíæ –ö–∞–∂–¥–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ PostgreSQL ‚âà 5-10 MB –ø–∞–º—è—Ç–∏");
            log.warn("   üîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: spring.datasource.hikari.maximum-pool-size=10");
        }

        if (minPoolSize > 5) {
            log.warn("‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—É–ª –º–æ–∂–Ω–æ —É–º–µ–Ω—å—à–∏—Ç—å –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏");
            log.warn("   üîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: spring.datasource.hikari.minimum-idle=2");
        }

        // –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        if (active == 0 && total > 5) {
            log.info("üí∞ –≠–ö–û–ù–û–ú–ò–Ø: –ë–î –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –º–æ–∂–Ω–æ —É–º–µ–Ω—å—à–∏—Ç—å –ø—É–ª –¥–æ 2-5 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π");
        } else if (active > 7) {
            log.info("üìà –ù–ê–ì–†–£–ó–ö–ê: –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ë–î, —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –ø—É–ª–∞ –æ–ø—Ç–∏–º–∞–ª–µ–Ω");
        }

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–∞–π–º–∞—É—Ç–∞–º
        long connectionTimeout = hikari.getConnectionTimeout();
        if (connectionTimeout > 10000) {
            log.info("‚è±Ô∏è –ú–æ–∂–Ω–æ —É–º–µ–Ω—å—à–∏—Ç—å connection-timeout –¥–æ 5000ms –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º");
        }

        // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è PostgreSQL –Ω–∞ Render
        log.info("üéØ –û–ü–¢–ò–ú–ê–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò –î–õ–Ø RENDER:");
        log.info("   spring.datasource.hikari.maximum-pool-size=10");
        log.info("   spring.datasource.hikari.minimum-idle=2");
        log.info("   spring.datasource.hikari.connection-timeout=5000");
        log.info("   spring.datasource.hikari.idle-timeout=300000");
        log.info("   spring.datasource.hikari.max-lifetime=1200000");
    }

    /**
     * –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö
     */
    @Scheduled(fixedRate = 60000) // –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    public void criticalDatabaseCheck() {
        if (dataSource instanceof HikariDataSource) {
            HikariDataSource hikari = (HikariDataSource) dataSource;
            HikariPoolMXBean poolMXBean = hikari.getHikariPoolMXBean();

            int awaiting = poolMXBean.getThreadsAwaitingConnection();
            int active = poolMXBean.getActiveConnections();
            int total = poolMXBean.getTotalConnections();

            // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏
            if (awaiting > 0) {
                log.error("üö® –ö–†–ò–¢–ò–ß–ù–û! {} –ø–æ—Ç–æ–∫–æ–≤ –æ–∂–∏–¥–∞—é—Ç –ë–î —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —É–∂–µ –º–∏–Ω—É—Ç—É!", awaiting);
            }

            if (active >= total && total > 0) {
                log.error("üö® –ö–†–ò–¢–ò–ß–ù–û! –í—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ë–î –∑–∞–Ω—è—Ç—ã! –ù–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –∂–¥–∞—Ç—å!");
            }

            // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö
            if (awaiting > 0 || active >= total) {
                log.error("üîç –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—É–ª–∞: –ê–∫—Ç–∏–≤–Ω—ã–µ: {}, –û–±—â–µ–µ: {}, –û–∂–∏–¥–∞—é—â–∏–µ: {}",
                        active, total, awaiting);
            }
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ë–î –ø—É–ª–∞
     */
    public DatabaseInfo getDatabaseInfo() {
        if (dataSource instanceof HikariDataSource) {
            HikariDataSource hikari = (HikariDataSource) dataSource;
            HikariPoolMXBean poolMXBean = hikari.getHikariPoolMXBean();

            int activeConnections = poolMXBean.getActiveConnections();
            int idleConnections = poolMXBean.getIdleConnections();
            int threadsAwaitingConnection = poolMXBean.getThreadsAwaitingConnection();
            int totalConnections = poolMXBean.getTotalConnections();

            int maxPoolSize = hikari.getMaximumPoolSize();
            int minPoolSize = hikari.getMinimumIdle();

            double usagePercent = totalConnections > 0 ?
                    ((double) activeConnections / totalConnections) * 100 : 0;

            String status = getDatabaseStatus(activeConnections, threadsAwaitingConnection,
                    totalConnections, maxPoolSize);
            String recommendation = getDatabaseRecommendation(activeConnections, idleConnections,
                    maxPoolSize, threadsAwaitingConnection);

            return new DatabaseInfo(activeConnections, idleConnections, threadsAwaitingConnection,
                    totalConnections, maxPoolSize, minPoolSize, usagePercent, status, recommendation);
        }

        return new DatabaseInfo(0, 0, 0, 0, 0, 0, 0, "UNKNOWN",
                "DataSource –Ω–µ —è–≤–ª—è–µ—Ç—Å—è HikariDataSource");
    }

    private String getDatabaseStatus(int active, int awaiting, int total, int maxPool) {
        if (awaiting > 0) return "CRITICAL";
        if (active >= total && total >= maxPool) return "CRITICAL";
        if (active > total * 0.8) return "WARNING";
        if (active == 0) return "IDLE";
        return "GOOD";
    }

    private String getDatabaseRecommendation(int active, int idle, int maxPool, int awaiting) {
        if (awaiting > 0) {
            return "–£–≤–µ–ª–∏—á—å—Ç–µ —Ä–∞–∑–º–µ—Ä –ø—É–ª–∞ –ë–î –∏–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã";
        }
        if (maxPool > 15) {
            return "–£–º–µ–Ω—å—à–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø—É–ª–∞ –¥–æ 10 –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏ –Ω–∞ Render";
        }
        if (idle > active * 3 && active > 0) {
            return "–ú–æ–∂–Ω–æ —É–º–µ–Ω—å—à–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø—É–ª–∞ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤";
        }
        if (active == 0) {
            return "–ë–î –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ –ø—É–ª–∞ –¥–æ 2-5 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π";
        }
        return "–ü—É–ª –ë–î –Ω–∞—Å—Ç—Ä–æ–µ–Ω –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ";
    }

    /**
     * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ë–î
     */
    @Getter
    public static class DatabaseInfo {
        private final int activeConnections;
        private final int idleConnections;
        private final int threadsAwaitingConnection;
        private final int totalConnections;
        private final int maxPoolSize;
        private final int minPoolSize;
        private final double usagePercent;
        private final String status;
        private final String recommendation;
        private final String timestamp;

        public DatabaseInfo(int activeConnections, int idleConnections, int threadsAwaitingConnection,
                            int totalConnections, int maxPoolSize, int minPoolSize, double usagePercent,
                            String status, String recommendation) {
            this.activeConnections = activeConnections;
            this.idleConnections = idleConnections;
            this.threadsAwaitingConnection = threadsAwaitingConnection;
            this.totalConnections = totalConnections;
            this.maxPoolSize = maxPoolSize;
            this.minPoolSize = minPoolSize;
            this.usagePercent = usagePercent;
            this.status = status;
            this.recommendation = recommendation;
            this.timestamp = LocalDateTime.now().toString();
        }

        public String getUsagePercentFormatted() {
            DecimalFormat df = new DecimalFormat("#.##");
            df.setDecimalFormatSymbols(java.text.DecimalFormatSymbols.getInstance(java.util.Locale.US));
            return df.format(usagePercent);
        }

        public String getStatusIcon() {
            switch (status) {
                case "CRITICAL": return "üî¥";
                case "WARNING": return "üü°";
                case "IDLE": return "üò¥";
                case "GOOD": return "üü¢";
                default: return "‚ùì";
            }
        }

        public String getStatusText() {
            switch (status) {
                case "CRITICAL": return "–ö—Ä–∏—Ç–∏—á–Ω–∏–π —Å—Ç–∞–Ω";
                case "WARNING": return "–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è";
                case "IDLE": return "–ü—Ä–æ—Å—Ç—ñ–π";
                case "GOOD": return "–ù–æ—Ä–º–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω";
                default: return "–ù–µ–≤—ñ–¥–æ–º–æ";
            }
        }
    }
}