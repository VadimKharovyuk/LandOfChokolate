package com.example.landofchokolate.config.system;

import jakarta.annotation.PostConstruct;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.lang.management.ManagementFactory;
import java.lang.management.MemoryMXBean;
import java.lang.management.MemoryUsage;


@Service
@Slf4j
public class RenderMemoryMonitoringService {

    private final MemoryMXBean memoryBean;

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ application.properties (—Å fallback –∑–Ω–∞—á–µ–Ω–∏—è–º–∏)
    @Value("${monitoring.memory.limit-mb:#{null}}")
    private Long configuredMemoryLimitMB;

    @Value("${monitoring.memory.auto-detect:true}")
    private boolean autoDetectMemoryLimit;

    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è Render
    private long memoryLimitMB;
    private long criticalThresholdMB;
    private long warningThresholdMB;
    private String renderPlan;

    public RenderMemoryMonitoringService() {
        this.memoryBean = ManagementFactory.getMemoryMXBean();
    }

    @PostConstruct
    public void initializeRenderMemoryLimits() {
        detectRenderMemoryConfiguration();
        logRenderMemoryConfiguration();
    }

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏ Render
     */
    private void detectRenderMemoryConfiguration() {
        // 1. –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–æ
        if (configuredMemoryLimitMB != null && configuredMemoryLimitMB > 0) {
            memoryLimitMB = configuredMemoryLimitMB;
            renderPlan = "–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –≤—Ä—É—á–Ω—É—é";
            log.info("üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç –ø–∞–º—è—Ç–∏: {} MB", memoryLimitMB);
        }
        // 2. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è Render
        else if (autoDetectMemoryLimit) {
            detectRenderPlan();
        }
        // 3. Fallback –∫ 512 MB (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π Render –ø–ª–∞–Ω)
        else {
            memoryLimitMB = 512;
            renderPlan = "Starter (fallback)";
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥–∏
        criticalThresholdMB = (long) (memoryLimitMB * 0.90); // 90%
        warningThresholdMB = (long) (memoryLimitMB * 0.80);  // 80%
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ Render –ø–æ JVM –ø–∞–º—è—Ç–∏
     */
    private void detectRenderPlan() {
        long maxJvmMemoryMB = Runtime.getRuntime().maxMemory() / (1024 * 1024);

        // Render —Ç–∏–ø–∏—á–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ JVM
        if (maxJvmMemoryMB <= 400) {
            memoryLimitMB = 512;
            renderPlan = "Starter";
        } else if (maxJvmMemoryMB <= 900) {
            memoryLimitMB = 1024;
            renderPlan = "Standard";
        } else if (maxJvmMemoryMB <= 1800) {
            memoryLimitMB = 2048;
            renderPlan = "Pro";
        } else {
            memoryLimitMB = 4096;
            renderPlan = "Pro+";
        }

        log.info("üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–ª–∞–Ω Render: {} ({} MB)", renderPlan, memoryLimitMB);
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Render
     */
    private void logRenderMemoryConfiguration() {
        log.info("üöÄ === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê RENDER ===");
        log.info("üì¶ –ü–ª–∞–Ω Render: {}", renderPlan);
        log.info("üíæ –õ–∏–º–∏—Ç –ø–∞–º—è—Ç–∏: {} MB", memoryLimitMB);
        log.info("üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${}/–º–µ—Å", getRenderPrice(memoryLimitMB));
        log.info("‚ö†Ô∏è –ü–æ—Ä–æ–≥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {} MB ({}%)", warningThresholdMB, 80);
        log.info("üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ä–æ–≥: {} MB ({}%)", criticalThresholdMB, 90);
        log.info("üîß –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {}", autoDetectMemoryLimit ? "–≤–∫–ª—é—á–µ–Ω–æ" : "–æ—Ç–∫–ª—é—á–µ–Ω–æ");

        if (configuredMemoryLimitMB != null) {
            log.info("‚öôÔ∏è –†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: {} MB", configuredMemoryLimitMB);
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã
        log.info("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã Render:");
        log.info("   ü•â Starter: 512 MB - $7/–º–µ—Å");
        log.info("   ü•à Standard: 1 GB - $25/–º–µ—Å");
        log.info("   ü•á Pro: 2 GB - $85/–º–µ—Å");
        log.info("   üíé Pro+: 4 GB - $170/–º–µ—Å");
    }

    /**
     * –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–∞–º—è—Ç–∏ –¥–ª—è Render
     */
    public void analyzeMemoryForRender() {
        MemoryUsage heapMemory = memoryBean.getHeapMemoryUsage();
        MemoryUsage nonHeapMemory = memoryBean.getNonHeapMemoryUsage();

        long heapUsed = heapMemory.getUsed() / (1024 * 1024);
        long nonHeapUsed = nonHeapMemory.getUsed() / (1024 * 1024);
        long totalUsed = heapUsed + nonHeapUsed;
        long remainingMB = memoryLimitMB - totalUsed;

        log.info("üéØ === –ê–ù–ê–õ–ò–ó –î–õ–Ø RENDER {} ({} MB) ===", renderPlan.toUpperCase(), memoryLimitMB);
        log.info("üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {} MB / {} MB ({}%)",
                totalUsed, memoryLimitMB,
                String.format("%.1f", (double) totalUsed / memoryLimitMB * 100));
        log.info("üÜì –û—Å—Ç–∞–ª–æ—Å—å –ø–∞–º—è—Ç–∏: {} MB", remainingMB);

        // –ê–Ω–∞–ª–∏–∑ Non-Heap —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏ –¥–ª—è Render
        analyzeRenderNonHeapMemory(nonHeapUsed);

        // –ê–Ω–∞–ª–∏–∑ Heap —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –¥–ª—è Render
        analyzeRenderHeapMemory(heapMemory);

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ JVM –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–ª–∞–Ω–∞
        provideRenderJVMRecommendations();

        // –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ upgrade
        analyzeRenderCriticalStatus(totalUsed, remainingMB);
    }

    /**
     * –ê–Ω–∞–ª–∏–∑ Non-Heap –ø–∞–º—è—Ç–∏ –¥–ª—è Render
     */
    private void analyzeRenderNonHeapMemory(long nonHeapUsed) {
        // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ Non-Heap –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞–Ω–∞ Render
        long nonHeapThreshold;
        long metaspaceLimit;
        long compressedClassLimit;

        switch (renderPlan.toLowerCase()) {
            case "starter":
                nonHeapThreshold = 100;
                metaspaceLimit = 64;
                compressedClassLimit = 32;
                break;
            case "standard":
                nonHeapThreshold = 150;
                metaspaceLimit = 128;
                compressedClassLimit = 64;
                break;
            case "pro":
            case "pro+":
                nonHeapThreshold = 200;
                metaspaceLimit = 256;
                compressedClassLimit = 128;
                break;
            default:
                nonHeapThreshold = Math.max(100, memoryLimitMB / 8);
                metaspaceLimit = Math.min(128, memoryLimitMB / 8);
                compressedClassLimit = Math.min(64, memoryLimitMB / 16);
        }

        if (nonHeapUsed > nonHeapThreshold) {
            log.warn("‚ö†Ô∏è Non-Heap –ø–∞–º—è—Ç—å {} MB –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–æ—Ä–æ–≥ {} MB –¥–ª—è –ø–ª–∞–Ω–∞ {}!",
                    nonHeapUsed, nonHeapThreshold, renderPlan);
            log.warn("   üí° –î–æ–±–∞–≤—å—Ç–µ –≤ JVM —Ñ–ª–∞–≥–∏:");
            log.warn("   üí° -XX:MaxMetaspaceSize={}m", metaspaceLimit);
            log.warn("   üí° -XX:CompressedClassSpaceSize={}m", compressedClassLimit);
        } else {
            log.info("‚úÖ Non-Heap –ø–∞–º—è—Ç—å {} MB –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞ –¥–ª—è –ø–ª–∞–Ω–∞ {}", nonHeapUsed, renderPlan);
        }
    }

    /**
     * –ê–Ω–∞–ª–∏–∑ Heap –ø–∞–º—è—Ç–∏ –¥–ª—è Render
     */
    private void analyzeRenderHeapMemory(MemoryUsage heapMemory) {
        long heapMax = heapMemory.getMax() / (1024 * 1024);
        long recommendedHeapMax = getRecommendedHeapMax();

        if (heapMax > recommendedHeapMax) {
            log.warn("‚ö†Ô∏è Heap –ª–∏–º–∏—Ç {} MB —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫ –¥–ª—è –ø–ª–∞–Ω–∞ {}! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è -Xmx{}m",
                    heapMax, renderPlan, recommendedHeapMax);
        } else if (heapMax < recommendedHeapMax * 0.7) {
            log.info("üí° –ú–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å Heap –¥–æ -Xmx{}m –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
                    recommendedHeapMax);
        } else {
            log.info("‚úÖ Heap –ª–∏–º–∏—Ç {} MB –æ–ø—Ç–∏–º–∞–ª–µ–Ω –¥–ª—è –ø–ª–∞–Ω–∞ {}", heapMax, renderPlan);
        }
    }

    /**
     * –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä Heap –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–ª–∞–Ω–∞ Render
     */
    private long getRecommendedHeapMax() {
        switch (renderPlan.toLowerCase()) {
            case "starter": return 350;      // 512 MB * 0.68
            case "standard": return 768;     // 1024 MB * 0.75
            case "pro": return 1536;         // 2048 MB * 0.75
            case "pro+": return 3072;        // 4096 MB * 0.75
            default: return (long)(memoryLimitMB * 0.7);
        }
    }

    /**
     * JVM —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–ª–∞–Ω–∞ Render
     */
    private void provideRenderJVMRecommendations() {
        log.info("üí° === –û–ü–¢–ò–ú–ê–õ–¨–ù–´–ï JVM –ù–ê–°–¢–†–û–ô–ö–ò –î–õ–Ø RENDER {} ===", renderPlan.toUpperCase());

        switch (renderPlan.toLowerCase()) {
            case "starter":
                log.info("üéØ RENDER STARTER (512 MB) - $7/–º–µ—Å:");
                log.info("   -Xms200m -Xmx350m");
                log.info("   -XX:MaxMetaspaceSize=64m");
                log.info("   -XX:CompressedClassSpaceSize=32m");
                log.info("   -XX:+UseG1GC -XX:MaxGCPauseMillis=100");
                break;

            case "standard":
                log.info("üéØ RENDER STANDARD (1 GB) - $25/–º–µ—Å:");
                log.info("   -Xms400m -Xmx768m");
                log.info("   -XX:MaxMetaspaceSize=128m");
                log.info("   -XX:CompressedClassSpaceSize=64m");
                log.info("   -XX:+UseG1GC -XX:MaxGCPauseMillis=100");
                break;

            case "pro":
                log.info("üéØ RENDER PRO (2 GB) - $85/–º–µ—Å:");
                log.info("   -Xms512m -Xmx1536m");
                log.info("   -XX:MaxMetaspaceSize=256m");
                log.info("   -XX:CompressedClassSpaceSize=128m");
                log.info("   -XX:+UseG1GC");
                break;

            case "pro+":
                log.info("üéØ RENDER PRO+ (4 GB) - $170/–º–µ—Å:");
                log.info("   -Xms1024m -Xmx3072m");
                log.info("   -XX:MaxMetaspaceSize=256m");
                log.info("   -XX:+UseG1GC");
                break;

            default:
                log.info("üéØ RENDER CUSTOM ({} MB):", memoryLimitMB);
                log.info("   -Xms{}m -Xmx{}m", memoryLimitMB / 4, getRecommendedHeapMax());
                log.info("   -XX:MaxMetaspaceSize={}m", Math.min(256, memoryLimitMB / 8));
        }

        // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è Render
        log.info("üîß –û–±—â–∏–µ —Ñ–ª–∞–≥–∏ –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞–Ω–æ–≤ Render:");
        log.info("   -XX:+UseCompressedOops");
        log.info("   -XX:+UseContainerSupport");
        log.info("   -XX:MaxRAMPercentage=75.0");
    }

    /**
     * –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞–ø–≥—Ä–µ–π–¥—É
     */
    private void analyzeRenderCriticalStatus(long totalUsed, long remainingMB) {
        double usagePercent = (double) totalUsed / memoryLimitMB * 100;

        if (totalUsed > criticalThresholdMB) {
            log.error("üö® –ö–†–ò–¢–ò–ß–ù–û: {}% –ø–∞–º—è—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –Ω–∞ –ø–ª–∞–Ω–µ {}!",
                    String.format("%.1f", usagePercent), renderPlan);
            log.error("üí° –°–†–û–ß–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:");
            log.error("   1. üóëÔ∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞");
            log.error("   2. üìà Upgrade –ø–ª–∞–Ω–∞ Render");
            log.error("   3. üîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è JVM –Ω–∞—Å—Ç—Ä–æ–µ–∫");

            suggestRenderUpgrade();

        } else if (totalUsed > warningThresholdMB) {
            log.warn("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: {}% –ø–∞–º—è—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –Ω–∞ –ø–ª–∞–Ω–µ {}",
                    String.format("%.1f", usagePercent), renderPlan);
            log.warn("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—é");

            if (remainingMB < 100) {
                log.warn("üî• –û—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ –ø–∞–º—è—Ç–∏! –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ upgrade");
                suggestRenderUpgrade();
            }

        } else {
            log.info("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ: {}% –Ω–∞ –ø–ª–∞–Ω–µ {}",
                    String.format("%.1f", usagePercent), renderPlan);

            if (usagePercent < 50 && !renderPlan.equals("Starter")) {
                log.info("üí∞ –í–æ–∑–º–æ–∂–Ω–æ, –º–æ–∂–Ω–æ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É—è –ø–ª–∞–Ω –º–µ–Ω—å—à–µ");
            }
        }
    }

    /**
     * –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ upgrade –ø–ª–∞–Ω–∞ Render
     */
    private void suggestRenderUpgrade() {
        String nextPlan = getNextRenderPlan();
        int nextPrice = getNextRenderPrice();
        long nextMemory = getNextRenderMemory();

        if (nextPlan != null) {
            log.error("üí∞ === –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø UPGRADE ===");
            log.error("üìà –¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω: {} ({} MB) - ${}/–º–µ—Å", renderPlan, memoryLimitMB, getRenderPrice(memoryLimitMB));
            log.error("üöÄ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π: {} ({} MB) - ${}/–º–µ—Å", nextPlan, nextMemory, nextPrice);
            log.error("üíµ –î–æ–ø–ª–∞—Ç–∞: +${}/–º–µ—Å", nextPrice - getRenderPrice(memoryLimitMB));
            log.error("üîß –ü–æ—Å–ª–µ upgrade –æ–±–Ω–æ–≤–∏—Ç–µ JVM –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!");
        } else {
            log.error("üíé –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω Render!");
            log.error("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ VPS");
        }
    }

    private String getNextRenderPlan() {
        switch (renderPlan.toLowerCase()) {
            case "starter": return "Standard";
            case "standard": return "Pro";
            case "pro": return "Pro+";
            default: return null;
        }
    }

    private long getNextRenderMemory() {
        switch (renderPlan.toLowerCase()) {
            case "starter": return 1024;
            case "standard": return 2048;
            case "pro": return 4096;
            default: return memoryLimitMB;
        }
    }

    private int getNextRenderPrice() {
        switch (renderPlan.toLowerCase()) {
            case "starter": return 25;
            case "standard": return 85;
            case "pro": return 170;
            default: return getRenderPrice(memoryLimitMB);
        }
    }

    private int getRenderPrice(long memoryMB) {
        if (memoryMB <= 512) return 7;
        if (memoryMB <= 1024) return 25;
        if (memoryMB <= 2048) return 85;
        return 170;
    }

    // –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –∫–ª–∞—Å—Å–∞—Ö
    public long getMemoryLimitMB() { return memoryLimitMB; }
    public long getCriticalThresholdMB() { return criticalThresholdMB; }
    public long getWarningThresholdMB() { return warningThresholdMB; }
    public String getRenderPlan() { return renderPlan; }
}