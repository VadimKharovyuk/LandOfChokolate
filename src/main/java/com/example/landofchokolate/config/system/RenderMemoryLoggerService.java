package com.example.landofchokolate.config.system;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

@Service
@Slf4j
@ConditionalOnProperty(name = "monitoring.render.memory.enabled", havingValue = "true", matchIfMissing = true)
public class RenderMemoryLoggerService {

    @Autowired
    private RenderMemoryMonitoringService renderService;

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ Render –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
     */
    @Scheduled(fixedRate = 300000) // 5 –º–∏–Ω—É—Ç = 300000 –º—Å
    public void logRenderMemoryStatistics() {
        try {
            log.info("üöÄ === –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–ê–ú–Ø–¢–ò RENDER ===");
            renderService.analyzeMemoryForRender();
            log.info("üöÄ === –ó–ê–í–ï–†–®–ï–ù –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–ê–ú–Ø–¢–ò ===");
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞–º—è—Ç–∏ Render: {}", e.getMessage(), e);
        }
    }

    /**
     * –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
     */
    @Scheduled(fixedRate = 60000) // –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    public void criticalRenderMemoryCheck() {
        try {
            // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            long totalUsedMB = getCurrentMemoryUsage();
            long criticalThreshold = renderService.getCriticalThresholdMB();

            if (totalUsedMB > criticalThreshold) {
                log.error("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–ê–ú–Ø–¢–¨ RENDER! {} MB / {} MB",
                        totalUsedMB, renderService.getMemoryLimitMB());

                // –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º —É—Ä–æ–≤–Ω–µ
                renderService.analyzeMemoryForRender();
            }
        } catch (Exception e) {
            log.debug("–û—à–∏–±–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {}", e.getMessage());
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
     */
    private long getCurrentMemoryUsage() {
        try {
            java.lang.management.MemoryMXBean memoryBean =
                    java.lang.management.ManagementFactory.getMemoryMXBean();

            long heapUsed = memoryBean.getHeapMemoryUsage().getUsed() / (1024 * 1024);
            long nonHeapUsed = memoryBean.getNonHeapMemoryUsage().getUsed() / (1024 * 1024);

            return heapUsed + nonHeapUsed;
        } catch (Exception e) {
            return 0;
        }
    }
}