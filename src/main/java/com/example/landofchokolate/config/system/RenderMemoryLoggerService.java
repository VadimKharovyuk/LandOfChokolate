package com.example.landofchokolate.config.system;

import com.example.landofchokolate.model.MemoryLog;
import com.example.landofchokolate.service.MemoryLogService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.lang.management.ManagementFactory;
import java.lang.management.MemoryMXBean;

@Service
@Slf4j
@RequiredArgsConstructor
@ConditionalOnProperty(name = "monitoring.render.memory.enabled", havingValue = "true", matchIfMissing = true)
public class RenderMemoryLoggerService {

    private final RenderMemoryMonitoringService renderService;
    private final MemoryLogService memoryLogService;

    @Value("${monitoring.render.memory.database.enabled:true}")
    private boolean databaseLoggingEnabled;

    @Value("${monitoring.render.memory.cleanup.days:30}")
    private int logRetentionDays;

    private final MemoryMXBean memoryBean = ManagementFactory.getMemoryMXBean();

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ Render –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î
     */
    @Scheduled(fixedRate = 300000) // 5 –º–∏–Ω—É—Ç = 300000 –º—Å
    public void logRenderMemoryStatistics() {
        try {
            log.info("üöÄ === –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–ê–ú–Ø–¢–ò RENDER ===");

            // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å
            renderService.analyzeMemoryForRender();

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
            if (databaseLoggingEnabled) {
                saveMemoryLogToDatabase();
            }

            log.info("üöÄ === –ó–ê–í–ï–†–®–ï–ù –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–ê–ú–Ø–¢–ò ===");

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞–º—è—Ç–∏ Render: {}", e.getMessage(), e);
        }
    }

    /**
     * –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
     */
    @Scheduled(fixedRate = 60000) // –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    public void criticalRenderMemoryCheck() {
        try {
            // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            long totalUsedMB = getCurrentMemoryUsage();
            long criticalThreshold = renderService.getCriticalThresholdMB();

            if (totalUsedMB > criticalThreshold) {
                log.error("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–ê–ú–Ø–¢–¨ RENDER! {} MB / {} MB",
                        totalUsedMB, renderService.getMemoryLimitMB());

                // –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º —É—Ä–æ–≤–Ω–µ
                renderService.analyzeMemoryForRender();

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ª–æ–≥ –≤ –ë–î
                if (databaseLoggingEnabled) {
                    MemoryLog criticalLog = saveMemoryLogToDatabase();
                    log.error("üíæ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î: ID={}", criticalLog.getId());
                }
            }
        } catch (Exception e) {
            log.debug("–û—à–∏–±–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {}", e.getMessage());
        }
    }

    /**
     * –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤ (–∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 2:00)
     */
    @Scheduled(cron = "0 0 2 * * SUN")
    public void cleanupOldMemoryLogs() {
        if (databaseLoggingEnabled) {
            try {
                log.info("üßπ –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤ —Å—Ç–∞—Ä—à–µ {} –¥–Ω–µ–π", logRetentionDays);
                memoryLogService.cleanupOldLogs(logRetentionDays);
            } catch (Exception e) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤: {}", e.getMessage(), e);
            }
        }
    }

    /**
     * –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ø–∞–º—è—Ç–∏ (–∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 9:00)
     */
    @Scheduled(cron = "0 0 9 * * MON")
    public void weeklyMemoryReport() {
        if (databaseLoggingEnabled) {
            try {
                log.info("üìä === –ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ü–ê–ú–Ø–¢–ò ===");

                MemoryLogService.MemoryUsageStats weeklyStats = memoryLogService.getUsageStats(168); // 7 –¥–Ω–µ–π = 168 —á–∞—Å–æ–≤
                MemoryLogService.MemoryUsageStats dailyStats = memoryLogService.getUsageStats(24);   // 24 —á–∞—Å–∞

                log.info("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:");
                log.info("   üìä –°—Ä–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {}%",
                        String.format("%.1f", weeklyStats.getAverageUsagePercentage()));
                log.info("   üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π: {}", weeklyStats.getCriticalEventsCount());

                log.info("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å—É—Ç–∫–∏:");
                log.info("   üìä –°—Ä–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {}%",
                        String.format("%.1f", dailyStats.getAverageUsagePercentage()));
                log.info("   üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π: {}", dailyStats.getCriticalEventsCount());

                // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                if (weeklyStats.getCriticalEventsCount() > 10) {
                    log.warn("‚ö†Ô∏è –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é!");
                    log.warn("üí° –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ upgrade –ø–ª–∞–Ω–∞ Render –∏–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è");
                }

                if (weeklyStats.getAverageUsagePercentage() > 85) {
                    log.warn("‚ö†Ô∏è –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –í—ã—Å–æ–∫–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏!");
                    log.warn("üí° –¢—Ä–µ–±—É–µ—Ç—Å—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è");
                }

                log.info("üìä === –ó–ê–í–ï–†–®–ï–ù –ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–´–ô –û–¢–ß–ï–¢ ===");

            } catch (Exception e) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {}", e.getMessage(), e);
            }
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–∞ –ø–∞–º—è—Ç–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
     */
    private MemoryLog  saveMemoryLogToDatabase() {
        try {
            return memoryLogService.createMemoryLog(
                    renderService.getRenderPlan(),
                    renderService.getMemoryLimitMB(),
                    renderService.getWarningThresholdMB(),
                    renderService.getCriticalThresholdMB()
            );
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–æ–≥–∞ –≤ –ë–î: {}", e.getMessage(), e);
            throw e;
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
     */
    private long getCurrentMemoryUsage() {
        try {
            long heapUsed = memoryBean.getHeapMemoryUsage().getUsed() / (1024 * 1024);
            long nonHeapUsed = memoryBean.getNonHeapMemoryUsage().getUsed() / (1024 * 1024);
            return heapUsed + nonHeapUsed;
        } catch (Exception e) {
            return 0;
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
     * –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è REST API –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     */
    public MemoryLogService.MemoryUsageStats getMemoryStats(int hours) {
        if (databaseLoggingEnabled) {
            return memoryLogService.getUsageStats(hours);
        }
        return MemoryLogService.MemoryUsageStats.builder()
                .averageUsagePercentage(0.0)
                .criticalEventsCount(0L)
                .periodHours(hours)
                .build();
    }
}