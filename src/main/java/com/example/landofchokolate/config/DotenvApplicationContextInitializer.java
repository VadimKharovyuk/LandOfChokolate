package com.example.landofchokolate.config;

import io.github.cdimascio.dotenv.Dotenv;
import org.springframework.context.ApplicationContextInitializer;
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.core.env.ConfigurableEnvironment;
import org.springframework.core.env.MapPropertySource;

import java.util.HashMap;
import java.util.Map;

public class DotenvApplicationContextInitializer implements ApplicationContextInitializer<ConfigurableApplicationContext> {

    @Override
    public void initialize(ConfigurableApplicationContext applicationContext) {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¢–û–õ–¨–ö–û .env —Ñ–∞–π–ª
            Dotenv dotenv = Dotenv.configure()
                    .ignoreIfMalformed()
                    .ignoreIfMissing()
                    .load();

            // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Å–≤–æ–π—Å—Ç–≤ –¢–û–õ–¨–ö–û –∏–∑ .env
            Map<String, Object> dotenvProperties = new HashMap<>();

            System.out.println("=== Loading .env file ===");
            dotenv.entries().forEach(entry -> {
                String key = entry.getKey();
                String value = entry.getValue();
                dotenvProperties.put(key, value);

                // –¢–∞–∫–∂–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
                System.setProperty(key, value);

                // –õ–æ–≥–∏—Ä—É–µ–º –¢–û–õ–¨–ö–û –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env (—Å–∫—Ä—ã–≤–∞—è —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
                if (key.contains("PASSWORD") || key.contains("SECRET") || key.contains("KEY")) {
                    System.out.println("üîë .env: " + key + " = [HIDDEN]");
                } else {
                    System.out.println("üîë .env: " + key + " = " + value);
                }
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –≤ environment Spring —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
            ConfigurableEnvironment environment = applicationContext.getEnvironment();
            environment.getPropertySources().addFirst(new MapPropertySource("dotenv", dotenvProperties));

            System.out.println("‚úÖ Successfully loaded " + dotenvProperties.size() + " properties from .env file");
            System.out.println("=== End .env loading ===");

        } catch (Exception e) {
            System.err.println("‚ùå Failed to load .env file: " + e.getMessage());
            e.printStackTrace();
        }
    }
}