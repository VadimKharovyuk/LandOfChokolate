package com.example.landofchokolate.model;

import com.example.landofchokolate.enums.PriceUnit;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

@Entity
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class Product {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String name;

    private BigDecimal price;

    @Column(nullable = false)
    private Integer stockQuantity = 0;

//    private String imageUrl;
//    private String imageId;

    @Column(unique = true)
    private String slug;


    // üÜï SEO –ø–æ–ª—è
    @Column(name = "meta_title", length = 60)
    private String metaTitle;

    @Column(name = "meta_description", length = 160)
    private String metaDescription;

    @Column(name = "description", columnDefinition = "TEXT")
    private String description;

    private String seoKeywords;


    private Boolean isActive = true;

    @Column(name = "is_recommendation")
    private Boolean isRecommendation = false;


    @Column(name = "click_count", nullable = false)
    private Integer clickCount = 0;


    @Enumerated(EnumType.STRING)
    @Column(name = "price_unit", nullable = false)
    private PriceUnit priceUnit = PriceUnit.PER_PIECE;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "category_id")
    private Category category;


    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "brand_id")
    private Brand brand;


    // üÜï –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    @OneToMany(mappedBy = "product", cascade = CascadeType.ALL, orphanRemoval = true)
    @OrderBy("sortOrder ASC, createdAt ASC")
    private List<ProductImage> images = new ArrayList<>();

    @CreationTimestamp
    @Column(name = "created_at", nullable = false, updatable = false)
    private LocalDateTime createdAt;

    @UpdateTimestamp
    @Column(name = "updated_at", nullable = false)
    private LocalDateTime updatedAt;

    public ProductImage getMainImage() {
        if (images == null || images.isEmpty()) return null;
        return images.stream()
                .filter(img -> Boolean.TRUE.equals(img.getIsMain()))
                .findFirst()
                .orElse(images.get(0));
    }


//    // üÜï –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
//    @Column(name = "review_count")
//    private Integer reviewCount = 0;


//
//    // üÜï –ó–∞–≥–æ–ª–æ–≤–æ–∫ H1 (–º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞)
//    @Column(name = "h1_title", length = 80)
//    private String h1Title;


//    / üÜï Enum –¥–ª—è –ª–µ–π–±–ª–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤
//    public enum ProductLabel {
//        NEW("–ù–æ–≤–∏–Ω–∫–∞"),
//        SALE("–ê–∫—Ü—ñ—è"),
//        HOT("–•—ñ—Ç –ø—Ä–æ–¥–∞–∂—ñ–≤"),
//        RECOMMENDED("–†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ"),
//        LIMITED("–û–±–º–µ–∂–µ–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å"),
//        BESTSELLER("–ë–µ—Å—Ç—Å–µ–ª–µ—Ä");
//
//        private final String displayName;
//
//        ProductLabel(String displayName) {
//            this.displayName = displayName;
//        }
//
//        public String getDisplayName() {
//            return displayName;
//        }

//    <span th:text="${product.priceUnit.label}"></span>
//<!-- –í—ã–≤–µ–¥–µ—Ç: "–∑–∞ —à—Ç—É–∫—É" –∏–ª–∏ "–∑–∞ 100 –≥" -->
}
