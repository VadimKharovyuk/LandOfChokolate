package com.example.landofchokolate.mapper;
import com.example.landofchokolate.dto.wishlis.WishlistDto;
import com.example.landofchokolate.dto.wishlis.WishlistItemDto;
import com.example.landofchokolate.model.Product;
import com.example.landofchokolate.model.ProductImage;
import com.example.landofchokolate.model.Wishlist;
import com.example.landofchokolate.model.WishlistItem;
import lombok.extern.slf4j.Slf4j;
import org.hibernate.LazyInitializationException;
import org.springframework.stereotype.Component;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

@Slf4j
@Component
public class WishlistMapper {

    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Wishlist –≤ WishlistDto
     */
    public WishlistDto toDto(Wishlist wishlist) {
        if (wishlist == null) {
            return createEmptyWishlistDto();
        }

        WishlistDto dto = new WishlistDto();
        dto.setId(wishlist.getId());
        dto.setWishlistUuid(wishlist.getWishlistUuid());
        dto.setCreatedAt(wishlist.getCreatedAt());
        dto.setUpdatedAt(wishlist.getUpdatedAt());

        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        List<WishlistItemDto> itemDtos = new ArrayList<>();
        if (wishlist.getItems() != null) {
            itemDtos = wishlist.getItems().stream()
                    .map(this::toItemDto)
                    .filter(Objects::nonNull) // –ò—Å–∫–ª—é—á–∞–µ–º null —ç–ª–µ–º–µ–Ω—Ç—ã
                    .collect(Collectors.toList());
        }
        dto.setItems(itemDtos);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
        dto.setIsEmpty(itemDtos.isEmpty());
        dto.setTotalItems(itemDtos.size());

        // –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        calculateWishlistMetrics(dto, itemDtos);

        log.debug("Mapped wishlist: id={}, totalItems={}, availableItems={}, total={}",
                dto.getId(), dto.getTotalItems(), dto.getAvailableItems(), dto.getTotal());

        return dto;
    }

    /**
     * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ wishlist (availableItems, total)
     */
    private void calculateWishlistMetrics(WishlistDto dto, List<WishlistItemDto> itemDtos) {
        if (itemDtos == null || itemDtos.isEmpty()) {
            dto.setAvailableItems(0);
            dto.setTotal(BigDecimal.ZERO);
            return;
        }

        int availableCount = 0;
        BigDecimal totalPrice = BigDecimal.ZERO;

        for (WishlistItemDto item : itemDtos) {
            if (item.getProduct() != null && item.getProduct().isAvailable()) {
                availableCount++;
                BigDecimal itemPrice = item.getProduct().getSafeCurrentPrice();
                if (itemPrice != null) {
                    totalPrice = totalPrice.add(itemPrice);
                }
            }
        }

        dto.setAvailableItems(availableCount);
        dto.setTotal(totalPrice);

        log.debug("Calculated metrics: availableItems={}, totalPrice={}", availableCount, totalPrice);
    }

    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ WishlistItem –≤ WishlistItemDto
     */
    private WishlistItemDto toItemDto(WishlistItem item) {
        if (item == null) {
            return null;
        }

        try {
            WishlistItemDto dto = new WishlistItemDto();
            dto.setId(item.getId());
            dto.setAddedAt(item.getAddedAt());

            // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Product
            if (item.getProduct() != null) {
                WishlistItemDto.ProductInfo productInfo = toProductInfo(item.getProduct());
                dto.setProduct(productInfo);
            }

            return dto;

        } catch (LazyInitializationException e) {
            log.warn("LazyInitializationException –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ WishlistItem: {}", e.getMessage());
            return null; // –ò—Å–∫–ª—é—á–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        } catch (Exception e) {
            log.error("Unexpected error –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ WishlistItem: {}", e.getMessage(), e);
            return null;
        }
    }

    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Product –≤ ProductInfo
     */
    private WishlistItemDto.ProductInfo toProductInfo(Product product) {
        try {
            WishlistItemDto.ProductInfo productInfo = new WishlistItemDto.ProductInfo();

            // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ
            productInfo.setId(safeGetProductId(product));
            productInfo.setName(safeGetProductName(product));
            productInfo.setSlug(safeGetProductSlug(product));
            productInfo.setCurrentPrice(safeGetProductPrice(product));
            productInfo.setImageUrl(safeGetProductImageUrl(product));
            productInfo.setStockQuantity(safeGetProductStock(product));
            productInfo.setIsActive(safeGetProductIsActive(product));

            log.debug("Mapped product: id={}, name={}, price={}, active={}, stock={}",
                    productInfo.getId(), productInfo.getName(), productInfo.getCurrentPrice(),
                    productInfo.isActive(), productInfo.getStockQuantity());

            return productInfo;

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ Product –≤ ProductInfo: {}", e.getMessage());
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            return createFallbackProductInfo(product);
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ fallback ProductInfo –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
     */
    private WishlistItemDto.ProductInfo createFallbackProductInfo(Product product) {
        WishlistItemDto.ProductInfo productInfo = new WishlistItemDto.ProductInfo();
        productInfo.setId(safeGetProductId(product));
        productInfo.setName("–¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
        productInfo.setCurrentPrice(BigDecimal.ZERO);
        productInfo.setIsActive(false);
        productInfo.setStockQuantity(0);
        productInfo.setSlug("");
        productInfo.setImageUrl("");
        return productInfo;
    }

    // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞
    private Long safeGetProductId(Product product) {
        try {
            return product.getId();
        } catch (LazyInitializationException e) {
            log.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø—Ä–æ–¥—É–∫—Ç–∞: {}", e.getMessage());
            return null;
        }
    }

    private String safeGetProductName(Product product) {
        try {
            String name = product.getName();
            return name != null ? name : "–¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω";
        } catch (LazyInitializationException e) {
            log.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞: {}", e.getMessage());
            return "–¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω";
        }
    }

    private String safeGetProductSlug(Product product) {
        try {
            String slug = product.getSlug();
            return slug != null ? slug : "";
        } catch (LazyInitializationException e) {
            log.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å slug –ø—Ä–æ–¥—É–∫—Ç–∞: {}", e.getMessage());
            return "";
        }
    }

    private BigDecimal safeGetProductPrice(Product product) {
        try {
            BigDecimal price = product.getPrice();
            return price != null ? price : BigDecimal.ZERO;
        } catch (LazyInitializationException e) {
            log.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –ø—Ä–æ–¥—É–∫—Ç–∞: {}", e.getMessage());
            return BigDecimal.ZERO;
        }
    }

    /**
     * üîÑ –û–ë–ù–û–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ URL –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
     */
    private String safeGetProductImageUrl(Product product) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            if (product.getImages() == null || product.getImages().isEmpty()) {
                return "";
            }

            // –ò—â–µ–º –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            String mainImageUrl = product.getImages().stream()
                    .filter(img -> Boolean.TRUE.equals(img.getIsMain()))
                    .findFirst()
                    .map(ProductImage::getImageUrl)
                    .orElse(null);

            // –ï—Å–ª–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –Ω–µ—Ç, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ
            if (mainImageUrl == null && !product.getImages().isEmpty()) { // ‚Üê üî• –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
                mainImageUrl = product.getImages().get(0).getImageUrl();
            }

            return mainImageUrl != null ? mainImageUrl : "";

        } catch (LazyInitializationException e) {
            log.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: {}", e.getMessage());
            return "";
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: {}", e.getMessage(), e);
            return "";
        }
    }

    private Integer safeGetProductStock(Product product) {
        try {
            Integer stock = product.getStockQuantity();
            return stock != null ? stock : 0;
        } catch (LazyInitializationException e) {
            log.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ: {}", e.getMessage());
            return 0;
        }
    }

    private Boolean safeGetProductIsActive(Product product) {
        try {
            Boolean isActive = product.getIsActive();
            return isActive != null ? isActive : false;
        } catch (LazyInitializationException e) {
            log.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {}", e.getMessage());
            return false;
        }
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –ø—É—Å—Ç–æ–π WishlistDto
     */
    private WishlistDto createEmptyWishlistDto() {
        WishlistDto dto = new WishlistDto();
        dto.setId(null);
        dto.setWishlistUuid("");
        dto.setItems(new ArrayList<>());
        dto.setCreatedAt(LocalDateTime.now());
        dto.setUpdatedAt(LocalDateTime.now());
        dto.setIsEmpty(true);
        dto.setTotalItems(0);
        dto.setAvailableItems(0);
        dto.setTotal(BigDecimal.ZERO);
        return dto;
    }

    /**
     * –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –º–µ—Ç—Ä–∏–∫ –±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è DTO
     * –ü–æ–ª–µ–∑–Ω–æ –ø—Ä–∏ —á–∞—Å—Ç—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    public void updateWishlistMetrics(WishlistDto dto) {
        if (dto == null || dto.getItems() == null) {
            return;
        }

        calculateWishlistMetrics(dto, dto.getItems());
    }

    /**
     * –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞ –±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞
     */
    public boolean isProductAvailable(Product product) {
        if (product == null) {
            return false;
        }

        try {
            Boolean isActive = safeGetProductIsActive(product);
            Integer stock = safeGetProductStock(product);
            return Boolean.TRUE.equals(isActive) && stock != null && stock > 0;
        } catch (Exception e) {
            log.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞: {}", e.getMessage());
            return false;
        }
    }
}