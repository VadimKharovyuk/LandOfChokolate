package com.example.landofchokolate.dto.product;

import com.example.landofchokolate.enums.PriceUnit;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.math.BigDecimal;
import java.util.List;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class ProductDetailDto {



    private Long id;
    private String name;
    private String slug;
    private BigDecimal price;
    private Integer stockQuantity;
    private List<ProductImageInfo> images;
    private Boolean isActive;

    // üÜï SEO –∞—Ç—Ä–∏–±—É—Ç—ã
    private String metaTitle;
    private String metaDescription;
    private String description;
    private PriceUnit priceUnit ;

    // –°–≤—è–∑–∞–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏
    private CategoryInfo category;
    private BrandInfo brand;


    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    public static class CategoryInfo {
        private Long id;
        private String name;
        private String slug;
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω—ã
        private String imageUrl;
        private String description;
    }

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–µ–Ω–¥–µ
    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    public static class BrandInfo {
        private Long id;
        private String name;
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –±—Ä–µ–Ω–¥–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω—ã
        private String imageUrl;
        private String description;
    }

    // –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —à–∞–±–ª–æ–Ω–∞—Ö
    public boolean isInStock() {
        return stockQuantity != null && stockQuantity > 0;
    }

    public boolean isLowStock() {
        return stockQuantity != null && stockQuantity > 0 && stockQuantity <= 5;
    }

    public String getStockStatus() {
        if (!isInStock()) {
            return "out-of-stock";
        } else if (isLowStock()) {
            return "low-stock";
        } else {
            return "in-stock";
        }
    }

    public String getStockMessage() {
        if (!isInStock()) {
            return "–ù–µ–º–∞—î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ";
        } else if (isLowStock()) {
            return "–ó–∞–ª–∏—à–∏–ª–æ—Å—è –º–∞–ª–æ";
        } else {
            return "–í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ: " + stockQuantity;
        }
    }
    public ProductImageInfo getMainImage() {
        if (images == null || images.isEmpty()) return null;
        return images.stream()
                .filter(img -> Boolean.TRUE.equals(img.getIsMain()))
                .findFirst()
                .orElse(images.get(0));
    }



    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ availability –¥–ª—è Schema.org —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    public String getSchemaAvailability() {
        return isInStock() ? "https://schema.org/InStock" : "https://schema.org/OutOfStock";
    }

    /**
     * –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π LimitedAvailability
     */
    public String getSchemaAvailabilityExtended() {
        if (!isInStock()) {
            return "https://schema.org/OutOfStock";
        } else if (isLowStock()) {
            return "https://schema.org/LimitedAvailability";
        } else {
            return "https://schema.org/InStock";
        }
    }

}