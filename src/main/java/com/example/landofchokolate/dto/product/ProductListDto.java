package com.example.landofchokolate.dto.product;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class ProductListDto {

    private Long id;
    private String name;
    private BigDecimal price;
    private Integer stockQuantity;
    private List<ProductImageInfo> images;

    private String slug ;


    // –ü—Ä–æ—Å—Ç—ã–µ –ø–æ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–∞—Ö
    private String categoryName;
    private String brandName;

    // –°—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞
    private boolean inStock;
    private boolean lowStock; // –µ—Å–ª–∏ –æ—Å—Ç–∞—Ç–æ–∫ –º–µ–Ω—å—à–µ 10

//    / üÜï –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ô –ö–û–ù–°–¢–†–£–ö–¢–û–† –î–õ–Ø JPQL –ó–ê–ü–†–û–°–û–í
    public ProductListDto(Long id, String name, BigDecimal price, Integer stockQuantity,
                          String imageUrl, String slug, String categoryName, String brandName,
                          boolean inStock, boolean lowStock) {
        this.id = id;
        this.name = name;
        this.price = price;
        this.stockQuantity = stockQuantity;
        this.slug = slug;
        this.categoryName = categoryName;
        this.brandName = brandName;
        this.inStock = inStock;
        this.lowStock = lowStock;

        // üîÑ –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ imageUrl –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if (imageUrl != null && !imageUrl.isEmpty()) {
            ProductImageInfo mainImage = new ProductImageInfo();
            mainImage.setImageUrl(imageUrl);
            mainImage.setIsMain(true);
            mainImage.setSortOrder(0);
            mainImage.setAltText(name); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–∫ alt
            this.images = List.of(mainImage);
        } else {
            this.images = new ArrayList<>();
        }
    }

    // Helper –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    public String getImageUrl() {
        return getMainImageUrl();
    }

    public String getMainImageUrl() {
        if (images == null || images.isEmpty()) {
            return null;
        }

        return images.stream()
                .filter(img -> Boolean.TRUE.equals(img.getIsMain()))
                .findFirst()
                .map(ProductImageInfo::getImageUrl)
                .orElse(images.get(0).getImageUrl());
    }

    public boolean hasImages() {
        return images != null && !images.isEmpty();
    }


}