package com.example.landofchokolate.service.serviceImpl;

import com.example.landofchokolate.dto.category.CategoryResponseDto;
import com.example.landofchokolate.dto.category.CreateCategoryDto;
import com.example.landofchokolate.mapper.CategoryMapper;
import com.example.landofchokolate.model.Category;
import com.example.landofchokolate.repository.CategoryRepository;
import com.example.landofchokolate.repository.ProductRepository;
import com.example.landofchokolate.service.CategoryService;
import com.example.landofchokolate.service.SlugService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Service
@Slf4j
@RequiredArgsConstructor
public class CategoryServiceImpl implements CategoryService {
    private final CategoryRepository categoryRepository;
    private final CategoryMapper categoryMapper;
    private final SlugService slugService;
    private final ProductRepository productRepository;

    @Override
    public CategoryResponseDto createCategory(CreateCategoryDto createCategoryDto) {
        log.info("Creating category with name: {}", createCategoryDto.getName());

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (categoryRepository.existsByName(createCategoryDto.getName())) {
            throw new RuntimeException("Category with name '" + createCategoryDto.getName() + "' already exists");
        }

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º DTO –≤ Entity
        Category category = categoryMapper.toEntity(createCategoryDto);

        // üÜï –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º slug —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        category.setSlug(slugService.generateUniqueSlugForCategory(createCategoryDto.getName()));

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        Category savedCategory = categoryRepository.save(category);

        log.info("Category created successfully with id: {}", savedCategory.getId());

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º ResponseDto
        return categoryMapper.toResponseDto(savedCategory);
    }

    @Override
    public CategoryResponseDto updateCategory(Long id, CreateCategoryDto updateCategoryDto) {
        log.info("Updating category with id: {}", id);

        Category existingCategory = categoryRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Category not found with id: " + id));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–æ–µ –∏–º—è –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
        if (!existingCategory.getName().equals(updateCategoryDto.getName()) &&
                categoryRepository.existsByName(updateCategoryDto.getName())) {
            throw new RuntimeException("Category with name '" + updateCategoryDto.getName() + "' already exists");
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é entity
        categoryMapper.updateEntityFromDto(updateCategoryDto, existingCategory);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        Category savedCategory = categoryRepository.save(existingCategory);

        log.info("Category updated successfully with id: {}", savedCategory.getId());

        return categoryMapper.toResponseDto(savedCategory);
    }

    @Override
    public void deleteCategory(Long id) {
        log.info("Attempting to delete category with id: {}", id);

        Category category = categoryRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("–ö–∞—Ç–µ–≥–æ—Ä—ñ—é –∑ id " + id + " –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"));

        // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        long productCount = productRepository.countByCategoryId(id);

        if (productCount > 0) {
            throw new RuntimeException(
                    String.format("–ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é '%s', –æ—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–∞ –º—ñ—Å—Ç–∏—Ç—å %d —Ç–æ–≤–∞—Ä(—ñ–≤). " +
                                    "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–º—ñ—Å—Ç—ñ—Ç—å –∞–±–æ –≤–∏–¥–∞–ª—ñ—Ç—å —Ç–æ–≤–∞—Ä–∏.",
                            category.getName(), productCount)
            );
        }

        categoryRepository.deleteById(id);
        log.info("Category '{}' deleted successfully with id: {}", category.getName(), id);
    }

    @Override
    public CategoryResponseDto getCategoryById(Long id) {
        log.info("Getting category with id: {}", id);

        Category category = categoryRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Category not found with id: " + id));

        return categoryMapper.toResponseDto(category);
    }

    @Override
    public List<CategoryResponseDto> getAllCategories() {
        log.info("Getting all categories");

        List<Category> categories = categoryRepository.findAll();
        log.info("Found {} categories", categories.size());

        return categoryMapper.toResponseDtoList(categories);
    }

    @Override
    public List<CategoryResponseDto> getCategoriesByName(String name) {
        log.info("Searching categories by name: {}", name);

        List<Category> categories = categoryRepository.findByNameContainingIgnoreCase(name);
        log.info("Found {} categories matching name: {}", categories.size(), name);

        return categoryMapper.toResponseDtoList(categories);
    }


    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç slug –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≥–¥–µ –æ–Ω null
     */
    @Override
    @Transactional
    public void generateMissingSlugForAllCategories() {
        List<Category> categoriesWithoutSlug = categoryRepository.findBySlugIsNull();

        for (Category category : categoriesWithoutSlug) {
            String slug = slugService.generateUniqueSlugForCategory(category.getName());
            category.setSlug(slug);
            categoryRepository.save(category);
            log.info("Generated slug '{}' for category id={} name='{}'",
                    slug, category.getId(), category.getName());
        }

        log.info("Generated slugs for {} categories", categoriesWithoutSlug.size());
    }
}