package com.example.landofchokolate.service.serviceImpl;

import com.example.landofchokolate.dto.category.*;
import com.example.landofchokolate.exception.CategoryNotFoundException;
import com.example.landofchokolate.mapper.CategoryMapper;
import com.example.landofchokolate.model.Category;
import com.example.landofchokolate.repository.CategoryRepository;
import com.example.landofchokolate.repository.ProductRepository;
import com.example.landofchokolate.service.CategoryService;
import com.example.landofchokolate.service.SlugService;
import com.example.landofchokolate.util.StorageService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.Model;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Service
@Slf4j
@RequiredArgsConstructor
public class CategoryServiceImpl implements CategoryService {
    private final CategoryRepository categoryRepository;
    private final CategoryMapper categoryMapper;
    private final SlugService slugService;
    private final ProductRepository productRepository;
    private final StorageService storageService;

    @Override
    public CategoryResponseDto createCategory(CreateCategoryDto createCategoryDto) {

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (categoryRepository.existsByName(createCategoryDto.getName())) {
            throw new RuntimeException("Category with name '" + createCategoryDto.getName() + "' already exists");
        }

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º DTO –≤ Entity
        Category category = categoryMapper.toEntity(createCategoryDto);

        // üÜï –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º slug —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        category.setSlug(slugService.generateUniqueSlugForCategory(createCategoryDto.getName()));

        // üÜï –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        handleImageUpload(createCategoryDto, category);
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        Category savedCategory = categoryRepository.save(category);

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º ResponseDto
        return categoryMapper.toResponseDto(savedCategory);
    }

    @Override
    public CategoryResponseDto updateCategory(Long id, CreateCategoryDto updateCategoryDto) {

        Category existingCategory = categoryRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Category not found with id: " + id));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–æ–µ –∏–º—è –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
        if (!existingCategory.getName().equals(updateCategoryDto.getName()) &&
                categoryRepository.existsByName(updateCategoryDto.getName())) {
            throw new RuntimeException("Category with name '" + updateCategoryDto.getName() + "' already exists");
        }
        // üÜï –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        handleImageUpdate(updateCategoryDto, existingCategory);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é entity
        categoryMapper.updateEntityFromDto(updateCategoryDto, existingCategory);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        Category savedCategory = categoryRepository.save(existingCategory);


        return categoryMapper.toResponseDto(savedCategory);
    }

    @Override
    public void deleteCategory(Long id) {
        Category category = categoryRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("–ö–∞—Ç–µ–≥–æ—Ä—ñ—é –∑ id " + id + " –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"));

        // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        long productCount = productRepository.countByCategoryId(id);

        if (productCount > 0) {
            throw new RuntimeException(
                    String.format("–ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é '%s', –æ—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–∞ –º—ñ—Å—Ç–∏—Ç—å %d —Ç–æ–≤–∞—Ä(—ñ–≤). " +
                                    "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–º—ñ—Å—Ç—ñ—Ç—å –∞–±–æ –≤–∏–¥–∞–ª—ñ—Ç—å —Ç–æ–≤–∞—Ä–∏.",
                            category.getName(), productCount)
            );
        }
        // üÜï –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        deleteImageIfExists(category);
        categoryRepository.deleteById(id);
    }

    @Override
    public CategoryResponseDto getCategoryById(Long id) {
        Category category = categoryRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Category not found with id: " + id));

        return categoryMapper.toResponseDto(category);
    }

    @Override
    public List<CategoryResponseDto> getAllCategories() {
        List<Category> categories = categoryRepository.findAll();
        return categoryMapper.toResponseDtoList(categories);
    }

    @Override
    public List<CategoryResponseDto> getCategoriesByName(String name) {
        List<Category> categories = categoryRepository.findByNameContainingIgnoreCase(name);
        return categoryMapper.toResponseDtoList(categories);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    private void handleImageUpload(CreateCategoryDto dto, Category category) {
        if (dto.getImage() != null && !dto.getImage().isEmpty()) {
            try {

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ StorageService
                StorageService.StorageResult result = storageService.uploadImage(dto.getImage());

                category.setImageUrl(result.getUrl());
                category.setImageId(result.getImageId());

            } catch (Exception e) {
                log.error("Error uploading image for category: {}", dto.getName(), e);
                throw new RuntimeException("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: " + e.getMessage());
            }
        } else {
            log.debug("No image provided for category: {}", dto.getName());
        }
    }



    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    private void handleImageUpdate(CreateCategoryDto dto, Category existingCategory) {
        if (dto.getImage() != null && !dto.getImage().isEmpty()) {
            try {

                // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                deleteImageIfExists(existingCategory);

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ StorageService
                StorageService.StorageResult result = storageService.uploadImage(dto.getImage());

                existingCategory.setImageUrl(result.getUrl());
                existingCategory.setImageId(result.getImageId());

            } catch (Exception e) {
                log.error("Error updating image for category id: {}", existingCategory.getId(), e);
                throw new RuntimeException("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: " + e.getMessage());
            }
        } else {
            log.debug("No new image provided for category id: {}", existingCategory.getId());
        }
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
     */
    private void deleteImageIfExists(Category category) {
        if (category.getImageId() != null && !category.getImageId().isEmpty()) {
            try {

                boolean deleted = storageService.deleteImage(category.getImageId());

                if (deleted) {
                    log.info("Image deleted successfully for category id: {}", category.getId());
                } else {
                    log.warn("Image deletion returned false for category id: {}, imageId: {}",
                            category.getId(), category.getImageId());
                }
            } catch (Exception e) {
                log.warn("Error deleting image for category id: {}, imageId: {}. Error: {}",
                        category.getId(), category.getImageId(), e.getMessage());
                // –ù–µ –±—Ä–æ—Å–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
            }
        }
    }



    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç slug –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≥–¥–µ –æ–Ω null
     */
    @Override
    @Transactional
    public void generateMissingSlugForAllCategories() {
        List<Category> categoriesWithoutSlug = categoryRepository.findBySlugIsNull();

        for (Category category : categoriesWithoutSlug) {
            String slug = slugService.generateUniqueSlugForCategory(category.getName());
            category.setSlug(slug);
            categoryRepository.save(category);
        }
    }

    /**
     * –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    @Override
    public CategoryEditData prepareEditData(Long id) {

        // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        CategoryResponseDto category = getCategoryById(id);

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–µ—Ä–µ–∑ mapper
        CategoryEditData editData = categoryMapper.toCategoryEditData(category);

        log.debug("Prepared edit data for category id={}, name={}", id, category.getName());
        return editData;
    }

    @Override
    public CategoryListPublicDto getPublicCategories(int page, int size) {
        // –°–æ–∑–¥–∞–µ–º Pageable —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        Pageable pageable = PageRequest.of(page, size, Sort.by("name").ascending());

        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        Page<Category> categoryPage = categoryRepository.findByIsActiveTrue(pageable);

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ PublicDto —Å —Ü–µ–Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        List<CategoryPublicDto> publicDtos = categoryPage.getContent().stream()
                .map(this::enrichCategoryWithPriceInfo)
                .collect(Collectors.toList());

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        List<Integer> pageNumbers = generatePageNumbers(page, categoryPage.getTotalPages());

        // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π DTO
        CategoryListPublicDto result = CategoryListPublicDto.builder()
                .categories(publicDtos)
                .totalCount((int) categoryPage.getTotalElements())
                .currentPage(page)
                .pageSize(size)
                .totalPages(categoryPage.getTotalPages())
                .hasNext(categoryPage.hasNext())
                .hasPrevious(categoryPage.hasPrevious())
                .nextPage(categoryPage.hasNext() ? page + 1 : null)
                .previousPage(categoryPage.hasPrevious() ? page - 1 : null)
                .pageNumbers(pageNumbers)
                .build();

        return result;
    }

    @Override
    public List<CategoryPublicDto> getTopCategories(int limit) {
        Pageable pageable = PageRequest.of(0, limit);
        List<Category> featuredCategories = categoryRepository
                .findByIsActiveTrueAndIsFeaturedTrueOrderByNameAsc(pageable);

        // –û–±–æ–≥–∞—â–∞–µ–º —Ü–µ–Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        List<CategoryPublicDto> result = featuredCategories.stream()
                .map(this::enrichCategoryWithPriceInfo)
                .collect(Collectors.toList());

        return result;
    }

    @Override
    public Category findBySlug(String slug) {
        return categoryRepository.findBySlugAndIsActiveTrue(slug)
                .orElseThrow(() -> new CategoryNotFoundException("Category not found: " + slug));
    }

    /**
     * –û–±–æ–≥–∞—â–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ü–µ–Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
     */
    private CategoryPublicDto enrichCategoryWithPriceInfo(Category category) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ü–µ–Ω –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            Map<String, Object> priceStats = productRepository.findPriceStatsByCategoryId(category.getId());

            BigDecimal minPrice = (BigDecimal) priceStats.get("minPrice");
            BigDecimal maxPrice = (BigDecimal) priceStats.get("maxPrice");
            Integer productCount = ((Number) priceStats.get("productCount")).intValue();

            return categoryMapper.toPublicDto(category, minPrice, maxPrice, productCount);

        } catch (Exception e) {
            log.warn("Error getting price info for category id={}: {}", category.getId(), e.getMessage());
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–µ–∑ —Ü–µ–Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            return categoryMapper.toPublicDto(category, null, null, 0);
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
     */
    private List<Integer> generatePageNumbers(int currentPage, int totalPages) {
        List<Integer> pageNumbers = new ArrayList<>();

        if (totalPages <= 0) {
            return pageNumbers;
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 5 —Å—Ç—Ä–∞–Ω–∏—Ü)
        int maxPagesToShow = 5;
        int startPage = Math.max(0, currentPage - maxPagesToShow / 2);
        int endPage = Math.min(totalPages - 1, startPage + maxPagesToShow - 1);

        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º startPage –µ—Å–ª–∏ endPage –¥–æ—Å—Ç–∏–≥ –º–∞–∫—Å–∏–º—É–º–∞
        if (endPage - startPage < maxPagesToShow - 1) {
            startPage = Math.max(0, endPage - maxPagesToShow + 1);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
        for (int i = startPage; i <= endPage; i++) {
            pageNumbers.add(i);
        }

        return pageNumbers;
    }


}