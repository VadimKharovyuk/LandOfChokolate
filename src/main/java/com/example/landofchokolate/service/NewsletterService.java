package com.example.landofchokolate.service;

import com.example.landofchokolate.dto.subscription.SubscriptionResponse;
import com.example.landofchokolate.util.SubscriptionCreatedEvent;
import lombok.Builder;
import lombok.Data;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.event.EventListener;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import org.thymeleaf.context.Context;
import org.thymeleaf.spring6.SpringTemplateEngine;
/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class NewsletterService {

    private final EmailService emailService;
    private final SubscriptionService subscriptionService;
    private final SpringTemplateEngine templateEngine;



    @EventListener
    @Async
    public void handleSubscriptionCreated(SubscriptionCreatedEvent event) {
        sendWelcomeEmail(event.getEmail());
    }


    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–¥–æ–±–∞–≤—å—Ç–µ –≤ NewsletterService)
     */
    public String generateNewsletterHtml(NewsletterData newsletterData) {
        try {
            Map<String, Object> context = createNewsletterContext(newsletterData);
            Context thymeleafContext = new Context();
            context.forEach(thymeleafContext::setVariable);

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º SpringTemplateEngine –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML
            return templateEngine.process("admin/email/newsletter", thymeleafContext);

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML: {}", e.getMessage());
            throw new RuntimeException("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML", e);
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
     */
    @Async
    public void sendCustomNewsletter(String subject, String title, String content,
                                     String imageUrl, String ctaText, String ctaUrl,
                                     String promoCode, String promoDescription) {

        NewsletterData newsletterData = NewsletterData.builder()
                .subject(subject)
                .title(title)
                .content(content)
                .imageUrl(imageUrl)
                .ctaText(ctaText)
                .ctaUrl(ctaUrl)
                .build();

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
        try {
            List<SubscriptionResponse> activeSubscribers = subscriptionService.getAllActiveSubscriptions();

            if (activeSubscribers.isEmpty()) {
                log.warn("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏");
                return;
            }

            List<String> emailList = activeSubscribers.stream()
                    .map(SubscriptionResponse::getEmail)
                    .collect(Collectors.toList());

            Map<String, Object> context = createNewsletterContext(newsletterData);

            // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if (promoCode != null && !promoCode.trim().isEmpty()) {
                context.put("promoCode", promoCode);
                context.put("promoDescription", promoDescription);
            }

            emailService.sendBulkEmail(emailList, subject, "newsletter", context);

            log.info("–ö–∞—Å—Ç–æ–º–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ '{}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {} –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º", subject, emailList.size());

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: {}", e.getMessage(), e);
        }
    }


    /**
     * DTO –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–∫–∏
     */
    @Data
    @Builder
    public static class NewsletterData {
        private String subject;
        private String title;
        private String content;
        private String imageUrl;
        private String ctaText;
        private String ctaUrl;
        private String unsubscribeUrl;
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
     *
     * @param newsletterData –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
     * @return –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º
     */
    @Async
    public void sendNewsletterToAllSubscribers(NewsletterData newsletterData) {
        try {
            log.info("–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É: {}", newsletterData.getSubject());

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            List<SubscriptionResponse> activeSubscribers = subscriptionService.getAllActiveSubscriptions();

            if (activeSubscribers.isEmpty()) {
                log.warn("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏");
                return;
            }

            // –ò–∑–≤–ª–µ–∫–∞–µ–º email-–∞–¥—Ä–µ—Å–∞
            List<String> emailList = activeSubscribers.stream()
                    .map(SubscriptionResponse::getEmail)
                    .collect(Collectors.toList());

            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–±–ª–æ–Ω–∞
            Map<String, Object> context = createNewsletterContext(newsletterData);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É
            emailService.sendBulkEmail(
                    emailList,
                    newsletterData.getSubject(),
                    "admin/email/newsletter",
                    context
            );

            log.info("–†–∞—Å—Å—ã–ª–∫–∞ '{}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {} –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º",
                    newsletterData.getSubject(), emailList.size());

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {}", e.getMessage(), e);
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–∏—Å—å–º–∞ –Ω–æ–≤–æ–º—É –ø–æ–¥–ø–∏—Å—á–∏–∫—É
     *
     * @param email Email –Ω–æ–≤–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
     */
    @Async
    public void sendWelcomeEmail(String email) {
        try {
            log.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –Ω–∞ {}", email);

            Map<String, Object> context = createWelcomeContext(email);

            emailService.sendEmail(
                    email,
                    "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ Land of Chocolate! üç´",
                    "admin/email/welcome",
                    context
            );

            log.info("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {}", email);

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–∏—Å—å–º–∞ –Ω–∞ {}: {}", email, e.getMessage());
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –ø—Ä–æ–¥—É–∫—Ç–µ
     *
     * @param productName –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
     * @param productDescription –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
     * @param productImageUrl –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
     * @param productUrl –°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ–¥—É–∫—Ç–∞
     */
    @Async
    public void sendNewProductNotification(String productName, String productDescription,
                                           String productImageUrl, String productUrl) {
        NewsletterData productData = NewsletterData.builder()
                .subject("–ù–æ–≤–∏–Ω–∫–∞ –≤ Land of Chocolate: " + productName + " üç´")
                .title("–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î–º–æ –Ω–æ–≤–∏–π –¥–µ—Å–µ—Ä—Ç!")
                .content("–ú–∏ —Ä–∞–¥—ñ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–∏ –≤–∞–º –Ω–∞—à –Ω–æ–≤–∏–π –≤–∏—à—É–∫–∞–Ω–∏–π –¥–µ—Å–µ—Ä—Ç: " + productName + ". " + productDescription)
                .imageUrl(productImageUrl)
                .ctaText("–ó–∞–º–æ–≤–∏—Ç–∏ –∑–∞—Ä–∞–∑")
                .ctaUrl(productUrl)
                .build();

        sendNewsletterToAllSubscribers(productData);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
     *
     * @param offerTitle –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
     * @param offerDescription –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
     * @param discountCode –ü—Ä–æ–º–æ–∫–æ–¥
     * @param validUntil –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ
     */
    @Async
    public void sendSpecialOffer(String offerTitle, String offerDescription,
                                 String discountCode, LocalDateTime validUntil) {
        NewsletterData offerData = NewsletterData.builder()
                .subject("–°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è: " + offerTitle + " üéÅ")
                .title("–ï–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –¥–ª—è –≤–∞—Å!")
                .content(offerDescription + " –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥: " + discountCode +
                        " –¥–æ " + validUntil.toLocalDate())
                .ctaText("–°–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—î—é")
                .ctaUrl("https://landofchocolate.com/catalog?promo=" + discountCode)
                .build();

        sendNewsletterToAllSubscribers(offerData);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
     */
    private Map<String, Object> createNewsletterContext(NewsletterData data) {
        Map<String, Object> context = new HashMap<>();
        context.put("title", data.getTitle());
        context.put("content", data.getContent());
        context.put("imageUrl", data.getImageUrl());
        context.put("ctaText", data.getCtaText());
        context.put("ctaUrl", data.getCtaUrl());
        context.put("currentYear", LocalDateTime.now().getYear());
        context.put("companyName", "Land of Chocolate");
        context.put("unsubscribeUrl", "https://landofchocolate.com/unsubscribe");
        context.put("websiteUrl", "https://landofchocolate.com");
        return context;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–∏—Å—å–º–∞
     */
    private Map<String, Object> createWelcomeContext(String email) {
        Map<String, Object> context = new HashMap<>();
        context.put("email", email);
        context.put("currentYear", LocalDateTime.now().getYear());
        context.put("companyName", "Land of Chocolate");
        context.put("websiteUrl", "https://landofchocolate.com"); // ‚úÖ –ü–æ–ª–Ω—ã–π URL
        context.put("catalogUrl", "https://landofchocolate.com/catalog");
        context.put("unsubscribeUrl", "https://landofchocolate.com/unsubscribe");
        return context;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫
     */
    public Map<String, Object> getNewsletterStats() {
        Map<String, Object> stats = new HashMap<>();

        List<SubscriptionResponse> subscribers = subscriptionService.getAllActiveSubscriptions();
        stats.put("totalSubscribers", subscribers.size());
        stats.put("emailServiceAvailable", emailService.isServiceAvailable());
        stats.put("lastUpdate", LocalDateTime.now());

        return stats;
    }
}