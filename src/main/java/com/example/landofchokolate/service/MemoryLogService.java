package com.example.landofchokolate.service;
import com.example.landofchokolate.model.MemoryLog;
import com.example.landofchokolate.repository.MemoryLogRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.lang.management.ManagementFactory;
import java.lang.management.MemoryMXBean;
import java.lang.management.MemoryUsage;
import java.time.LocalDateTime;
import java.util.List;

@Service
@RequiredArgsConstructor
@Slf4j
@ConditionalOnProperty(name = "monitoring.render.memory.database.enabled", havingValue = "true", matchIfMissing = true)
public class MemoryLogService {

    private final MemoryLogRepository memoryLogRepository;
    private final MemoryMXBean memoryBean = ManagementFactory.getMemoryMXBean();

    /**
     * –°–æ–∑–¥–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥ –ø–∞–º—è—Ç–∏
     */
    @Transactional
    public MemoryLog createMemoryLog(String renderPlan, long memoryLimitMb,
                                     long warningThresholdMb, long criticalThresholdMb) {
        try {
            MemoryUsage heapMemory = memoryBean.getHeapMemoryUsage();
            MemoryUsage nonHeapMemory = memoryBean.getNonHeapMemoryUsage();

            long heapUsedMb = heapMemory.getUsed() / (1024 * 1024);
            long heapMaxMb = heapMemory.getMax() / (1024 * 1024);
            long nonHeapUsedMb = nonHeapMemory.getUsed() / (1024 * 1024);
            long totalUsedMb = heapUsedMb + nonHeapUsedMb;
            long remainingMb = memoryLimitMb - totalUsedMb;
            double usagePercentage = (double) totalUsedMb / memoryLimitMb * 100;

            // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            MemoryLog.MemoryStatus status = determineStatus(totalUsedMb, warningThresholdMb, criticalThresholdMb);
            boolean isCritical = totalUsedMb > criticalThresholdMb;
            boolean isWarning = totalUsedMb > warningThresholdMb;

            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            String recommendations = generateRecommendations(status, usagePercentage, renderPlan);
            String jvmFlags = generateJvmFlags(renderPlan);

            MemoryLog memoryLog = MemoryLog.builder()
                    .timestamp(LocalDateTime.now())
                    .renderPlan(renderPlan)
                    .memoryLimitMb(memoryLimitMb)
                    .heapUsedMb(heapUsedMb)
                    .heapMaxMb(heapMaxMb)
                    .nonHeapUsedMb(nonHeapUsedMb)
                    .totalUsedMb(totalUsedMb)
                    .remainingMb(remainingMb)
                    .usagePercentage(Math.round(usagePercentage * 10.0) / 10.0) // –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 1 –∑–Ω–∞–∫–∞
                    .status(status)
                    .isCritical(isCritical)
                    .isWarning(isWarning)
                    .warningThresholdMb(warningThresholdMb)
                    .criticalThresholdMb(criticalThresholdMb)
                    .renderPrice(getRenderPrice(memoryLimitMb))
                    .recommendations(recommendations)
                    .jvmFlags(jvmFlags)
                    .build();

            MemoryLog savedLog = memoryLogRepository.save(memoryLog);
            log.debug("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–≥ –ø–∞–º—è—Ç–∏: ID={}, Status={}, Usage={}%",
                    savedLog.getId(), savedLog.getStatus(), savedLog.getUsagePercentage());

            return savedLog;

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–æ–≥–∞ –ø–∞–º—è—Ç–∏: {}", e.getMessage(), e);
            throw new RuntimeException("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ª–æ–≥ –ø–∞–º—è—Ç–∏", e);
        }
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–∞–º—è—Ç–∏
     */
    private MemoryLog.MemoryStatus determineStatus(long totalUsedMb, long warningThresholdMb, long criticalThresholdMb) {
        if (totalUsedMb > criticalThresholdMb) {
            return MemoryLog.MemoryStatus.CRITICAL;
        } else if (totalUsedMb > warningThresholdMb) {
            return MemoryLog.MemoryStatus.WARNING;
        } else {
            return MemoryLog.MemoryStatus.OPTIMAL;
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
     */
    private String generateRecommendations(MemoryLog.MemoryStatus status, double usagePercentage, String renderPlan) {
        StringBuilder recommendations = new StringBuilder();

        switch (status) {
            case CRITICAL:
                recommendations.append("üö® –ö–†–ò–¢–ò–ß–ù–û! –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n");
                recommendations.append("1. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞\n");
                recommendations.append("2. –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å upgrade –ø–ª–∞–Ω–∞ Render\n");
                recommendations.append("3. –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å JVM –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n");
                recommendations.append("4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏\n");
                break;
            case WARNING:
                recommendations.append("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n");
                recommendations.append("1. –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—é\n");
                recommendations.append("2. –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏\n");
                recommendations.append("3. –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n");
                break;
            case OPTIMAL:
                recommendations.append("‚úÖ –ü–∞–º—è—Ç—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ\n");
                if (usagePercentage < 50 && !renderPlan.equals("Starter")) {
                    recommendations.append("üí∞ –í–æ–∑–º–æ–∂–Ω–∞ —ç–∫–æ–Ω–æ–º–∏—è –Ω–∞ –ø–ª–∞–Ω–µ –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞\n");
                }
                break;
        }

        return recommendations.toString();
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å JVM —Ñ–ª–∞–≥–∏
     */
    private String generateJvmFlags(String renderPlan) {
        switch (renderPlan.toLowerCase()) {
            case "starter":
                return "-Xms200m -Xmx350m -XX:MaxMetaspaceSize=64m -XX:CompressedClassSpaceSize=32m -XX:+UseG1GC";
            case "standard":
                return "-Xms400m -Xmx768m -XX:MaxMetaspaceSize=128m -XX:CompressedClassSpaceSize=64m -XX:+UseG1GC";
            case "pro":
                return "-Xms512m -Xmx1536m -XX:MaxMetaspaceSize=256m -XX:CompressedClassSpaceSize=128m -XX:+UseG1GC";
            case "pro+":
                return "-Xms1024m -Xmx3072m -XX:MaxMetaspaceSize=256m -XX:+UseG1GC";
            default:
                return "-XX:+UseG1GC -XX:+UseCompressedOops -XX:+UseContainerSupport";
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –ø–ª–∞–Ω–∞ Render
     */
    private int getRenderPrice(long memoryMb) {
        if (memoryMb <= 512) return 7;
        if (memoryMb <= 1024) return 25;
        if (memoryMb <= 2048) return 85;
        return 170;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —á–∞—Å—ã
     */
    public List<MemoryLog> getRecentLogs(int hours) {
        LocalDateTime startTime = LocalDateTime.now().minusHours(hours);
        return memoryLogRepository.findByTimestampAfter(startTime);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ª–æ–≥–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
     */
    public List<MemoryLog> getCriticalLogs(LocalDateTime startTime, LocalDateTime endTime) {
        return memoryLogRepository.findCriticalLogsBetween(startTime, endTime);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
     */
    public MemoryUsageStats getUsageStats(int hours) {
        LocalDateTime startTime = LocalDateTime.now().minusHours(hours);
        LocalDateTime endTime = LocalDateTime.now();

        Double averageUsage = memoryLogRepository.getAverageUsagePercentage(startTime, endTime);
        Long criticalCount = memoryLogRepository.countCriticalEventsAfter(startTime);

        return MemoryUsageStats.builder()
                .averageUsagePercentage(averageUsage != null ? averageUsage : 0.0)
                .criticalEventsCount(criticalCount != null ? criticalCount : 0L)
                .periodHours(hours)
                .build();
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞)
     */
    @Transactional
    public void cleanupOldLogs(int daysToKeep) {
        LocalDateTime cutoffTime = LocalDateTime.now().minusDays(daysToKeep);
        try {
            memoryLogRepository.deleteByTimestampBefore(cutoffTime);
            log.info("üßπ –û—á–∏—â–µ–Ω—ã –ª–æ–≥–∏ —Å—Ç–∞—Ä—à–µ {} –¥–Ω–µ–π", daysToKeep);
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤: {}", e.getMessage(), e);
        }
    }

    /**
     * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
     */
    @lombok.Data
    @lombok.Builder
    public static class MemoryUsageStats {
        private Double averageUsagePercentage;
        private Long criticalEventsCount;
        private Integer periodHours;
    }
}