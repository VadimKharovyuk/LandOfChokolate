// global-notifications.js - –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ü–ï–†–í–´–ú –≤ layout
(function() {
    'use strict';

    // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    window.showNotification = function(message, type = 'success', autoHideTime = 3000) {
        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const existingNotifications = document.querySelectorAll('.notification');
        existingNotifications.forEach(notification => notification.remove());

        const notification = document.createElement('div');
        notification.className = `notification ${type}`;

        let icon, bgColor;
        switch(type) {
            case 'success':
                icon = 'check-circle';
                bgColor = '#28a745';
                autoHideTime = autoHideTime || 3000;
                break;
            case 'error':
                icon = 'exclamation-triangle';
                bgColor = '#dc3545';
                autoHideTime = autoHideTime || 5000; // –û—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ª—å—à–µ
                break;
            case 'warning':
                icon = 'exclamation-triangle';
                bgColor = '#ffc107';
                autoHideTime = autoHideTime || 4000;
                break;
            case 'info':
                icon = 'info-circle';
                bgColor = '#17a2b8';
                autoHideTime = autoHideTime || 2000; // –ò–Ω—Ñ–æ –±—ã—Å—Ç—Ä–æ –∏—Å—á–µ–∑–∞–µ—Ç
                break;
            default:
                icon = 'check-circle';
                bgColor = '#28a745';
        }

        notification.innerHTML = `
            <i class="fas fa-${icon}"></i>
            <span>${message}</span>
            <button class="notification-close" onclick="this.parentElement.remove()" 
                    style="margin-left: auto; background: none; border: none; color: inherit; font-size: 18px; cursor: pointer; padding: 0; width: 20px; height: 20px;">
                √ó
            </button>
        `;

        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 9999;
            max-width: 400px;
            padding: 1rem 1.5rem;
            border-radius: 8px;
            color: ${type === 'warning' ? '#000' : '#FFFFFF'};
            font-weight: 500;
            background: ${bgColor};
            display: flex;
            align-items: center;
            gap: 0.5rem;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            animation: slideInRight 0.3s ease;
            cursor: pointer;
        `;

        document.body.appendChild(notification);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
        if (autoHideTime > 0) {
            setTimeout(() => {
                hideNotification(notification);
            }, autoHideTime);
        }

        return notification;
    };

    // –§—É–Ω–∫—Ü–∏—è —Å–∫—Ä—ã—Ç–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    function hideNotification(notification) {
        if (notification && notification.parentNode) {
            notification.style.animation = 'slideOutRight 0.3s ease';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                }
            }, 300);
        }
    }

    // üéØ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø - –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞
    window.handleServerResponse = function(data, options = {}) {
        const settings = {
            showNotification: true,
            updateCounters: true,
            playSound: false,
            redirectOnSuccess: null,
            customSuccessHandler: null,
            customErrorHandler: null,
            ...options
        };

        if (data.success) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            if (settings.showNotification && data.message) {
                showNotification(data.message, 'success');
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
            if (settings.updateCounters) {
                if (data.cartItemCount !== undefined) {
                    updateCartCounter(data.cartItemCount);
                }
                if (data.wishlistItemCount !== undefined || data.itemCount !== undefined) {
                    updateWishlistCounter(data.wishlistItemCount || data.itemCount);
                }
            }

            // –ö–∞—Å—Ç–æ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—Ö–∞
            if (settings.customSuccessHandler && typeof settings.customSuccessHandler === 'function') {
                settings.customSuccessHandler(data);
            }

            // –†–µ–¥–∏—Ä–µ–∫—Ç –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
            if (settings.redirectOnSuccess) {
                setTimeout(() => {
                    window.location.href = settings.redirectOnSuccess;
                }, 1500);
            }

        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            if (settings.showNotification && data.message) {
                showNotification(data.message, 'error');
            }

            // –ö–∞—Å—Ç–æ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏
            if (settings.customErrorHandler && typeof settings.customErrorHandler === 'function') {
                settings.customErrorHandler(data);
            }
        }

        // –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        if (settings.playSound) {
            playNotificationSound(data.success ? 'success' : 'error');
        }

        return data;
    };

    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
    function updateCartCounter(count) {
        const cartCounters = document.querySelectorAll('.cart-count, .nav-cart-count, [data-cart-count]');
        cartCounters.forEach(counter => {
            counter.textContent = count;
            counter.style.display = count > 0 ? 'inline-block' : 'none';
        });
    }

    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    function updateWishlistCounter(count) {
        const wishlistCounters = document.querySelectorAll('.wishlist-count, .nav-wishlist-count, [data-wishlist-count]');
        wishlistCounters.forEach(counter => {
            counter.textContent = count;
            counter.style.display = count > 0 ? 'inline-block' : 'none';
        });
    }

    // –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    function playNotificationSound(type) {
        try {
            const audio = new Audio();
            audio.volume = 0.2;
            audio.src = type === 'success' ? '/sounds/success.mp3' : '/sounds/error.mp3';
            audio.play().catch(() => {}); // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        } catch (e) {
            // –ó–≤—É–∫ –æ—Ç–∫–ª—é—á–µ–Ω
        }
    }

    // CSS —Å—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π
    if (!document.querySelector('#notification-styles')) {
        const style = document.createElement('style');
        style.id = 'notification-styles';
        style.textContent = `
            @keyframes slideInRight {
                from { transform: translateX(100%); opacity: 0; }
                to { transform: translateX(0); opacity: 1; }
            }
            @keyframes slideOutRight {
                from { transform: translateX(0); opacity: 1; }
                to { transform: translateX(100%); opacity: 0; }
            }
        `;
        document.head.appendChild(style);
    }

})();